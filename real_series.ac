from nat import Nat
from rat import Rat
from list import partials, sum, map, List, range
from real_ring import Real

// This file defines infinite series and proves theorems about them.

class Real {
    // Placeholder to let other modules import Real from here.
}

// seq_lte is whether every element of the sequence is lte.
define seq_lte(a: Nat -> Real, b: Nat -> Real) -> Bool {
    forall(n: Nat) {
        a(n) <= b(n)
    }
}

theorem partials_suc(a: Nat -> Real, n: Nat) {
    partials(a, n.suc) = partials(a, n) + a(n)
} by {
    // Simplify the left hand side.
    partials(a, n.suc) = sum(map(List.range(n.suc), a))
    List.range(n.suc) = List.range(n) + List.singleton(n)
    map(List.range(n.suc), a) = map(List.range(n), a) + map(List.singleton(n), a)
    sum(map(List.range(n.suc), a)) = sum(map(List.range(n), a)) + sum(map(List.singleton(n), a))
}

// Theorem: If seq_lte(a, b), then their partials also obey seq_lte.
// theorem partials_seq_lte(a: Nat -> Real, b: Nat -> Real) {
//     seq_lte(a, b) implies seq_lte(partials(a), partials(b))
// }

