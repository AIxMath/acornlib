{"goal":"x.distance(x) <= x.distance(y) + y.distance(x)","proof":["x.distance(x) <= x.distance(y) + y.distance(x)"]}
{"goal":"0 <= x.distance(y) + x.distance(y)","proof":["Real.new(lib(real.real_base).add_gt(x.distance(y), x.distance(y))) = x.distance(y) + x.distance(y)","Real.new(lib(real.real_base).add_gt(x.distance(y), y.distance(x))) = x.distance(y) + y.distance(x)","y.distance(x) = x.distance(y)","x.distance(x) = 0"]}
{"goal":"0 <= x.distance(y)","proof":["not x.distance(y).is_negative or not x.distance(y).is_negative or (x.distance(y) + x.distance(y)).is_negative","0 <= x.distance(y) or x.distance(y).is_negative","x.distance(y).is_negative","not 0 <= x.distance(y) + x.distance(y) or not (x.distance(y) + x.distance(y)).is_negative","not (x.distance(y) + x.distance(y)).is_negative"]}
{"goal":"distance_non_negative","proof":["not 0 <= x.distance(y) or not x.distance(y).is_negative"]}
{"goal":"0 <= discrete(x, y)","proof":["y != x or discrete(x, y) = 0","0 <= discrete(x, y) or discrete(x, y).is_negative","discrete(x, y).is_negative","discrete(x, y) != 0 or not discrete(x, y).is_negative","discrete(x, y) = 0","discrete(x, y) != 0"]}
{"goal":"0 <= discrete(x, y)","proof":["not 1.is_negative or not discrete(x, y).is_negative or (1 * discrete(x, y)).is_positive","not discrete(x, y) <= 0 or not discrete(x, y).is_positive or 0.is_positive","discrete(x, y) = 1 or y = x","discrete(x, y) = 1","discrete(x, y) <= 0 or 0 <= discrete(x, y)","discrete(x, y) <= 0","0 <= discrete(x, y) or discrete(x, y).is_negative","discrete(x, y).is_negative","1.is_negative","1 * discrete(x, y) = discrete(x, y)","not discrete(x, y).is_positive","not 1.is_negative or (1 * discrete(x, y)).is_positive","not (1 * discrete(x, y)).is_positive","(1 * discrete(x, y)).is_positive"]}
{"goal":"zero_lte_discrete","proof":[]}
{"goal":"discrete_self_distance_is_zero","proof":["x != x or discrete(x, x) = 0"]}
{"goal":"discrete_dist_zero_imp_eq","proof":["discrete(x, y) = 1 or y = x","discrete(x, y) = 1","not lib(rat.rat_base).Rat.1.is_positive or Real.from_rat(lib(rat.rat_base).Rat.1).is_positive","not discrete(x, y).is_positive","not 1.is_positive","not Real.from_rat(lib(rat.rat_base).Rat.1).is_positive"]}
{"goal":"discrete(x, y) = discrete(y, x)","proof":[]}
{"goal":"discrete(x, y) = discrete(y, x)","proof":["discrete(x, y) = 1 or y = x","discrete(y, x) = 1 or y = x","discrete(y, x) = 1","discrete(x, y) = 1","discrete(x, y) != 1"]}
{"goal":"discrete_symmetric","proof":[]}
{"goal":"discrete(x, z) <= discrete(x, y) + discrete(y, z)","proof":["not discrete(x, z) <= discrete(x, x) + discrete(y, z)","discrete(x, x) = 0","not discrete(x, z) <= 0 + discrete(y, z)","0 + discrete(y, z) = discrete(y, z)","not discrete(x, z) <= discrete(y, z)","discrete(x, z) <= discrete(x, z)"]}
{"goal":"discrete(x, y) = 1","proof":["discrete(x, y) = 1 or y = x"]}
{"goal":"0 <= discrete(y, z)","proof":["0 <= discrete(y, z)"]}
{"goal":"discrete(x, z) <= discrete(x, y) + discrete(y, z)","proof":["not discrete(x, z) <= 1 + discrete(y, z)","not 0 <= discrete(y, z) or 1 + 0 <= 1 + discrete(y, z)","not discrete(x, z) <= 1 + 0 or not 1 + 0 <= 1 + discrete(y, z) or discrete(x, z) <= 1 + discrete(y, z)","discrete(y, x) = 1 or y = x","discrete(y, x) = 1","z != x or discrete(x, z) = 0","discrete(y, z) + 0 = discrete(y, z)","discrete(x, z) = 0","0 <= discrete(y, z) + 0","1 + 0 <= 1 + discrete(y, z)","0 <= discrete(y, x) + 0","0 <= 1 + 0","not 1 + 0 <= 1 + discrete(y, z) or not discrete(x, z) <= 1 + 0","discrete(x, z) <= 1 + 0","not discrete(x, z) <= 1 + 0"]}
{"goal":"discrete(x, z) <= discrete(x, y) + discrete(y, z)","proof":["not 0 <= discrete(y, z) or 0 + 1 <= discrete(y, z) + 1","discrete(x, z) = 1 or z = x","discrete(x, z) = 1","discrete(y, z) + discrete(x, y) = discrete(x, y) + discrete(y, z)","0 + 1 = 1","not discrete(x, z) <= discrete(y, z) + discrete(x, y)","not discrete(x, z) <= discrete(y, z) + 1","not 1 <= discrete(y, z) + 1","0 + 1 <= discrete(y, z) + 1"]}
{"goal":"discrete_triangle","proof":[]}
{"goal":"forall(x0: Color, x1: Color) { discrete(x0)(x1) = 0 implies x0 = x1 } and forall(x2: Color) { discrete(x2)(x2) = 0 } and forall(x3: Color, x4: Color) { discrete(x3)(x4) = discrete(x4)(x3) } and forall(x5: Color, x6: Color, x7: Color) { discrete(x5)(x7) <= discrete(x5)(x6) + discrete(x6)(x7) }","proof":["let (s0: Color, s1: Color, s2: Color, s3: Color, s4: Color, s5: Color, s6: Color, s7: Color) satisfy { not discrete(s5, s7) <= discrete(s5, s6) + discrete(s6, s7) or discrete(s4, s3) != discrete(s3, s4) or discrete(s2, s2) != 0 or discrete(s0, s1) = 0 and (not discrete(s5, s7) <= discrete(s5, s6) + discrete(s6, s7) or discrete(s4, s3) != discrete(s3, s4) or discrete(s2, s2) != 0 or s1 != s0) }","discrete(s5, s7) <= discrete(s5, s6) + discrete(s6, s7)","discrete(s4, s3) = discrete(s3, s4)","discrete(s0, s1) != 0 or s1 = s0","discrete(s2, s2) = 0","s1 != s0","discrete(s0, s1) = 0","discrete(s0, s1) != 0"]}
