{"goal":"exists(k0: Real) { s(k0) }","proof":["let s0: Real -> Bool -> Real satisfy { forall(x0: Real -> Bool) { not is_nonempty(x0) or x0(s0(x0)) } and forall(x1: Real -> Bool, x2: Real) { not x1(x2) or is_nonempty(x1) } }","not s(s0(s))","not is_nonempty(s) or s(s0(s))"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) < x }","proof":["let s0: Nat satisfy { true }","let s1: (Real, Rat) -> Rat satisfy { forall(x0: Real, x1: Rat) { not x0.is_close(Real.from_rat(s1(x0, x1)), Real.from_rat(x1)) or not x1.is_positive } and forall(x2: Rat, x3: Real) { not x2.is_positive or Real.from_rat(s1(x3, x2)) < x3 } }","not Real.from_rat(s1(x, rat.iop(s0))) < x","not rat.iop(s0).is_positive or Real.from_rat(s1(x, rat.iop(s0))) < x","not rat.iop(s0).is_positive","rat.iop(s0).is_positive"]}
{"goal":"not is_upper_bound(s, Real.from_rat(r1))","proof":["not Real.from_rat(r1) < x or not x <= Real.from_rat(r1) or Real.from_rat(r1) < Real.from_rat(r1)","not is_upper_bound(s, Real.from_rat(r1)) or not s(x) or x <= Real.from_rat(r1)","not s(x) or x <= Real.from_rat(r1)","x <= Real.from_rat(r1)","not Real.from_rat(r1) < Real.from_rat(r1) or Real.from_rat(r1) != Real.from_rat(r1)","not Real.from_rat(r1) < Real.from_rat(r1)","not x <= Real.from_rat(r1) or Real.from_rat(r1) < Real.from_rat(r1)"]}
{"goal":"sup_cut(s, r1)","proof":["is_upper_bound(s, Real.from_rat(r1)) or sup_cut(s, r1)"]}
{"goal":"exists(k0: Rat) { Real.from_rat(k0) > ub }","proof":["let s0: Real satisfy { true }","let s1: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { x0 < Real.from_rat(s1(x0, x1)) } and forall(x2: Real, x3: Real) { x2 < Real.from_rat(s1(x3, x2)) } }","not Real.from_rat(s1(ub, s0)) > ub","not ub < Real.from_rat(s1(ub, s0)) or not Real.from_rat(s1(ub, s0)) <= ub or ub < ub","ub < Real.from_rat(s1(ub, s0))","Real.from_rat(s1(ub, s0)) > ub or Real.from_rat(s1(ub, s0)) <= ub","Real.from_rat(s1(ub, s0)) <= ub","not ub < ub or ub != ub","not ub < ub","not ub < Real.from_rat(s1(ub, s0)) or ub < ub","ub < ub"]}
{"goal":"y <= ub","proof":["not is_upper_bound(s, ub) or not s(y) or y <= ub","not is_upper_bound(s, ub) or not s(y)"]}
{"goal":"ub < Real.from_rat(r2)","proof":["ub >= Real.from_rat(r2) or ub < Real.from_rat(r2)","ub >= Real.from_rat(r2)","not Real.from_rat(r2) <= ub or not Real.from_rat(r2) > ub","ub >= Real.from_rat(r2) = Real.from_rat(r2) <= ub","not Real.from_rat(r2) <= ub","Real.from_rat(r2) <= ub"]}
{"goal":"y < Real.from_rat(r2)","proof":["not ub < Real.from_rat(r2) or not y <= ub or y < Real.from_rat(r2)","not ub < Real.from_rat(r2) or not y <= ub"]}
{"goal":"y <= Real.from_rat(r2)","proof":["not y < Real.from_rat(r2) or y <= Real.from_rat(r2)"]}
{"goal":"is_upper_bound(s, Real.from_rat(r2))","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s(s0(s, Real.from_rat(r2))) or s0(s, Real.from_rat(r2)) <= Real.from_rat(r2)","not s0(s, Real.from_rat(r2)) <= Real.from_rat(r2) or is_upper_bound(s, Real.from_rat(r2))","is_upper_bound(s, Real.from_rat(r2)) or s(s0(s, Real.from_rat(r2)))","s(s0(s, Real.from_rat(r2)))","not s0(s, Real.from_rat(r2)) <= Real.from_rat(r2)","s0(s, Real.from_rat(r2)) <= Real.from_rat(r2)"]}
{"goal":"not sup_cut(s, r2)","proof":["not is_upper_bound(s, Real.from_rat(r2)) or not sup_cut(s, r2)"]}
{"goal":"sup_cut_is_cut","proof":["let s0: Rat satisfy { true }","not sup_cut(s, r1) or is_cut(sup_cut(s)) or sup_cut(s, s0)","not sup_cut(s, s0) or is_cut(sup_cut(s)) or sup_cut(s, r2)","not sup_cut(s, r1) or sup_cut(s, s0)","not sup_cut(s, s0) or sup_cut(s, r2)","sup_cut(s, s0)","not sup_cut(s, s0)"]}
{"goal":"not is_upper_bound(s, Real.from_rat(y))","proof":["not is_upper_bound(s, Real.from_rat(y)) or not sup_cut(s, y)"]}
{"goal":"exists(k0: Real) { s(k0) and k0 > Real.from_rat(y) }","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s0(s, Real.from_rat(y)) > Real.from_rat(y) or not s(s0(s, Real.from_rat(y)))","not s0(s, Real.from_rat(y)) <= Real.from_rat(y) or is_upper_bound(s, Real.from_rat(y))","is_upper_bound(s, Real.from_rat(y)) or s(s0(s, Real.from_rat(y)))","s0(s, Real.from_rat(y)) > Real.from_rat(y) or s0(s, Real.from_rat(y)) <= Real.from_rat(y)","s(s0(s, Real.from_rat(y)))","not s0(s, Real.from_rat(y)) <= Real.from_rat(y)","not s0(s, Real.from_rat(y)) > Real.from_rat(y)","s0(s, Real.from_rat(y)) > Real.from_rat(y)"]}
{"goal":"z > Real.from_rat(x)","proof":["not z + Real.0 > Real.from_rat(y) or real_base.add_gt(z, Real.0, y)","not real_base.add_gt(z, Real.0, x) or z + Real.0 > Real.from_rat(x)","not is_lower(real_base.add_gt(z, Real.0)) or not x < y or not real_base.add_gt(z, Real.0, y) or real_base.add_gt(z, Real.0, x)","z + Real.0 = z","not z + Real.0 > Real.from_rat(x)","is_lower(real_base.add_gt(z, Real.0))","z + Real.0 > Real.from_rat(y)","not is_lower(real_base.add_gt(z, Real.0)) or not real_base.add_gt(z, Real.0, y) or real_base.add_gt(z, Real.0, x)","not real_base.add_gt(z, Real.0, y) or real_base.add_gt(z, Real.0, x)","not real_base.add_gt(z, Real.0, x)","real_base.add_gt(z, Real.0, y)","not real_base.add_gt(z, Real.0, y)"]}
{"goal":"not is_upper_bound(s, Real.from_rat(x))","proof":["not is_upper_bound(s, Real.from_rat(x)) or not s(z) or z <= Real.from_rat(x)","not z > Real.from_rat(x) or not z <= Real.from_rat(x)","not s(z) or z <= Real.from_rat(x)","not z <= Real.from_rat(x)","z <= Real.from_rat(x)"]}
{"goal":"sup_cut(s, x)","proof":["is_upper_bound(s, Real.from_rat(x)) or sup_cut(s, x)"]}
{"goal":"sup_cut_is_lower","proof":["let (s0: Rat -> Bool -> Rat, s1: Rat -> Bool -> Rat) satisfy { forall(x0: Rat -> Bool, x1: Rat, x2: Rat) { not is_lower(x0) or not x1 < x2 or not x0(x2) or x0(x1) } and forall(x3: Rat -> Bool) { is_lower(x3) or x3(s1(x3)) } and forall(x4: Rat -> Bool) { s0(x4) < s1(x4) or is_lower(x4) } and forall(x5: Rat -> Bool) { not x5(s0(x5)) or is_lower(x5) } }","not sup_cut(s, s1(sup_cut(s))) or not s0(sup_cut(s)) < s1(sup_cut(s)) or sup_cut(s, s0(sup_cut(s)))","s0(sup_cut(s)) < s1(sup_cut(s)) or is_lower(sup_cut(s))","not sup_cut(s, s0(sup_cut(s))) or is_lower(sup_cut(s))","not sup_cut(s, s0(sup_cut(s)))","is_lower(sup_cut(s)) or sup_cut(s, s1(sup_cut(s)))","sup_cut(s, s1(sup_cut(s)))","s0(sup_cut(s)) < s1(sup_cut(s))"]}
{"goal":"exists(k0: Rat) { is_greatest(sup_cut(s), k0) }","proof":["let s0: Rat -> Bool -> Rat satisfy { forall(x0: Rat -> Bool) { not has_greatest(x0) or is_greatest(x0, s0(x0)) } and forall(x1: Rat -> Bool, x2: Rat) { not is_greatest(x1, x2) or has_greatest(x1) } }","not is_greatest(sup_cut(s), s0(sup_cut(s)))","not has_greatest(sup_cut(s)) or is_greatest(sup_cut(s), s0(sup_cut(s)))"]}
{"goal":"sup_cut(s, q)","proof":["not is_greatest(sup_cut(s), q) or sup_cut(s, q)"]}
{"goal":"not is_upper_bound(s, Real.from_rat(q))","proof":["not is_upper_bound(s, Real.from_rat(q)) or not sup_cut(s, q)"]}
{"goal":"exists(k0: Real) { s(k0) and k0 > Real.from_rat(q) }","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s0(s, Real.from_rat(q)) > Real.from_rat(q) or not s(s0(s, Real.from_rat(q)))","not s0(s, Real.from_rat(q)) <= Real.from_rat(q) or is_upper_bound(s, Real.from_rat(q))","is_upper_bound(s, Real.from_rat(q)) or s(s0(s, Real.from_rat(q)))","s0(s, Real.from_rat(q)) > Real.from_rat(q) or s0(s, Real.from_rat(q)) <= Real.from_rat(q)","s(s0(s, Real.from_rat(q)))","not s0(s, Real.from_rat(q)) <= Real.from_rat(q)","not s0(s, Real.from_rat(q)) > Real.from_rat(q)","s0(s, Real.from_rat(q)) > Real.from_rat(q)"]}
{"goal":"Real.from_rat(q) < z","proof":["Real.from_rat(q) >= z or Real.from_rat(q) < z","Real.from_rat(q) >= z","not z <= Real.from_rat(q) or not z > Real.from_rat(q)","Real.from_rat(q) >= z = z <= Real.from_rat(q)","not z <= Real.from_rat(q)","z <= Real.from_rat(q)"]}
{"goal":"exists(k0: Rat) { q < k0 and Real.from_rat(k0) < z }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 < x1 or s0(x0, x1).is_positive } and forall(x2: Real, x3: Real) { not x2 < x3 or x2 + Real.from_rat(s0(x2, x3)) < x3 } }","not Real.from_rat(q + s0(Real.from_rat(q), z)) < z or not q < q + s0(Real.from_rat(q), z)","not Real.from_rat(q) < z or Real.from_rat(q) + Real.from_rat(s0(Real.from_rat(q), z)) < z","Real.from_rat(q) + Real.from_rat(s0(Real.from_rat(q), z)) = Real.from_rat(q + s0(Real.from_rat(q), z))","not Real.from_rat(q) < z or s0(Real.from_rat(q), z).is_positive","not s0(Real.from_rat(q), z).is_positive or q < q + s0(Real.from_rat(q), z)","s0(Real.from_rat(q), z).is_positive","Real.from_rat(q) + Real.from_rat(s0(Real.from_rat(q), z)) < z","Real.from_rat(q + s0(Real.from_rat(q), z)) < z","not q < q + s0(Real.from_rat(q), z)"]}
{"goal":"not is_upper_bound(s, Real.from_rat(q_prime))","proof":["not is_upper_bound(s, Real.from_rat(q_prime)) or not s(z) or z <= Real.from_rat(q_prime)","not Real.from_rat(q_prime) < z or not Real.from_rat(q_prime) >= z","Real.from_rat(q_prime) >= z = z <= Real.from_rat(q_prime)","not s(z) or z <= Real.from_rat(q_prime)","z <= Real.from_rat(q_prime)","not Real.from_rat(q_prime) >= z","Real.from_rat(q_prime) >= z"]}
{"goal":"sup_cut(s, q_prime)","proof":["is_upper_bound(s, Real.from_rat(q_prime)) or sup_cut(s, q_prime)"]}
{"goal":"not q_prime <= q","proof":["not q_prime <= q or not q < q_prime or q < q","not q < q or not q < q","not q < q_prime or q < q","q < q"]}
{"goal":"not is_greatest(sup_cut(s), q)","proof":["not is_greatest(sup_cut(s), q) or not sup_cut(s, q_prime) or q_prime <= q","not sup_cut(s, q_prime) or q_prime <= q"]}
{"goal":"false","proof":[]}
{"goal":"sup_cut_not_has_greatest","proof":[]}
{"goal":"sup_cut_is_dedekind_cut","proof":["not has_greatest(sup_cut(s)) or not is_upper_bound(s, ub) or not is_nonempty(s)","not is_upper_bound(s, ub) or not is_nonempty(s) or is_lower(sup_cut(s))","not is_upper_bound(s, ub) or not is_nonempty(s) or is_cut(sup_cut(s))","not is_lower(sup_cut(s)) or not is_cut(sup_cut(s)) or has_greatest(sup_cut(s)) or is_dedekind_cut(sup_cut(s))","is_cut(sup_cut(s))","is_lower(sup_cut(s))","not has_greatest(sup_cut(s))","has_greatest(sup_cut(s))"]}
{"goal":"is_dedekind_cut(sup_cut(s))","proof":["not is_nonempty(s) or not is_upper_bound(s, x) or is_dedekind_cut(sup_cut(s))"]}
{"goal":"exists(k0: Rat) { z > Real.from_rat(k0) and Real.from_rat(k0) > y }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 > x1 or x0 > Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 > x3 or Real.from_rat(s0(x2, x3)) > x3 } }","not z > Real.from_rat(s0(z, y)) or not Real.from_rat(s0(z, y)) > y","not z > y or Real.from_rat(s0(z, y)) > y","not z > y or z > Real.from_rat(s0(z, y))","z > Real.from_rat(s0(z, y))","Real.from_rat(s0(z, y)) > y","not Real.from_rat(s0(z, y)) > y"]}
{"goal":"not sup_cut(s, q)","proof":["not is_dedekind_cut(sup_cut(s)) or not sup_cut(s, q) or Real.new(sup_cut(s)).gt_rat(q)","not y.gt_rat(q) or y > Real.from_rat(q)","lib(order).PartialOrder.lt<Real>(Real.from_rat(q), y) = y > Real.from_rat(q)","not lib(order).PartialOrder.lt<Real>(Real.from_rat(q), y) or Real.from_rat(q) <= y","not Real.from_rat(q) <= y or not Real.from_rat(q) > y","not Real.from_rat(q) <= y","not sup_cut(s, q) or Real.new(sup_cut(s)).gt_rat(q)","Real.new(sup_cut(s)).gt_rat(q)","y.gt_rat(q)","y > Real.from_rat(q)","not lib(order).PartialOrder.lt<Real>(Real.from_rat(q), y)","lib(order).PartialOrder.lt<Real>(Real.from_rat(q), y)"]}
{"goal":"is_upper_bound(s, Real.from_rat(q))","proof":["is_upper_bound(s, Real.from_rat(q)) or sup_cut(s, q)"]}
{"goal":"z <= Real.from_rat(q)","proof":["not is_upper_bound(s, Real.from_rat(q)) or not s(z) or z <= Real.from_rat(q)","not is_upper_bound(s, Real.from_rat(q)) or not s(z)"]}
{"goal":"false","proof":["not z > Real.from_rat(q) or not z <= Real.from_rat(q)"]}
{"goal":"is_upper_bound(s, y)","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s0(s, y) > y or not s(s0(s, y))","not s0(s, y) <= y or is_upper_bound(s, y)","not s0(s, y) <= y","is_upper_bound(s, y) or s(s0(s, y))","s(s0(s, y))","s0(s, y) > y or s0(s, y) <= y","not s0(s, y) > y","s0(s, y) > y"]}
{"goal":"exists(k0: Rat) { y > Real.from_rat(k0) and Real.from_rat(k0) > w }","proof":["let s0: (Real, Real) -> Rat satisfy { forall(x0: Real, x1: Real) { not x0 > x1 or x0 > Real.from_rat(s0(x0, x1)) } and forall(x2: Real, x3: Real) { not x2 > x3 or Real.from_rat(s0(x2, x3)) > x3 } }","not Real.from_rat(s0(y, w)) > w or not y > Real.from_rat(s0(y, w))","not y > w or Real.from_rat(s0(y, w)) > w","not y > w or y > Real.from_rat(s0(y, w))","y > Real.from_rat(s0(y, w))","Real.from_rat(s0(y, w)) > w","not Real.from_rat(s0(y, w)) > w"]}
{"goal":"sup_cut(s, q)","proof":["not Real.new(sup_cut(s)).gt_rat(q) or not is_dedekind_cut(sup_cut(s)) or sup_cut(s, q)","not y > Real.from_rat(q) or y.gt_rat(q)","y.gt_rat(q)","not Real.new(sup_cut(s)).gt_rat(q) or sup_cut(s, q)","Real.new(sup_cut(s)).gt_rat(q)","not Real.new(sup_cut(s)).gt_rat(q)"]}
{"goal":"not is_upper_bound(s, Real.from_rat(q))","proof":["not is_upper_bound(s, Real.from_rat(q)) or not sup_cut(s, q)"]}
{"goal":"exists(k0: Real) { s(k0) and k0 > Real.from_rat(q) }","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s0(s, Real.from_rat(q)) > Real.from_rat(q) or not s(s0(s, Real.from_rat(q)))","not s0(s, Real.from_rat(q)) <= Real.from_rat(q) or is_upper_bound(s, Real.from_rat(q))","is_upper_bound(s, Real.from_rat(q)) or s(s0(s, Real.from_rat(q)))","s0(s, Real.from_rat(q)) > Real.from_rat(q) or s0(s, Real.from_rat(q)) <= Real.from_rat(q)","s(s0(s, Real.from_rat(q)))","not s0(s, Real.from_rat(q)) <= Real.from_rat(q)","not s0(s, Real.from_rat(q)) > Real.from_rat(q)","s0(s, Real.from_rat(q)) > Real.from_rat(q)"]}
{"goal":"z <= w","proof":["not is_upper_bound(s, w) or not s(z) or z <= w","not is_upper_bound(s, w) or not s(z)"]}
{"goal":"Real.from_rat(q) > w","proof":[]}
{"goal":"z > Real.from_rat(q)","proof":[]}
{"goal":"z > w","proof":["not lib(util).is_transitive<Real>(Real.lte) or not Real.from_rat(q) <= z or not z <= w or Real.from_rat(q) <= w","z <= Real.from_rat(q) or Real.from_rat(q) <= z","not Real.from_rat(q) <= w or not Real.from_rat(q) > w","not z <= Real.from_rat(q) or not z > Real.from_rat(q)","not z <= Real.from_rat(q)","not Real.from_rat(q) <= w","not Real.from_rat(q) <= z or Real.from_rat(q) <= w","Real.from_rat(q) <= z","not Real.from_rat(q) <= z"]}
{"goal":"false","proof":["not z > w or not z <= w"]}
{"goal":"ub_imp_lub","proof":["not is_least_upper_bound(s, y)","let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real) { not is_least_upper_bound(x0, x1) or is_upper_bound(x0, x1) } and forall(x2: Real -> Bool, x3: Real, x4: Real) { not is_least_upper_bound(x2, x3) or not is_upper_bound(x2, x4) or x3 <= x4 } and forall(x5: Real -> Bool, x6: Real) { not is_upper_bound(x5, x6) or is_upper_bound(x5, s0(x5, x6)) or is_least_upper_bound(x5, x6) } and forall(x7: Real, x8: Real -> Bool) { not x7 <= s0(x8, x7) or not is_upper_bound(x8, x7) or is_least_upper_bound(x8, x7) } }","not is_upper_bound(s, s0(s, y)) or not y > s0(s, y)","not y <= s0(s, y) or not is_upper_bound(s, y) or is_least_upper_bound(s, y)","not is_upper_bound(s, y) or is_upper_bound(s, s0(s, y)) or is_least_upper_bound(s, y)","is_upper_bound(s, s0(s, y))","not y <= s0(s, y)","y > s0(s, y) or y <= s0(s, y)","not y > s0(s, y)","y > s0(s, y)"]}
{"goal":"flip(ff, x) = ff(-x)","proof":["flip(ff, x) != ff(-x) or ff(-x)","flip(ff, x) = ff(-x)","ff(-x)","not flip(ff, x)","flip(ff, x)"]}
{"goal":"flip(flip(f), x) = flip(f)(-x)","proof":["flip(flip(f), x) != flip(f, -x) or flip(f, -x)","flip(flip(f), x) = flip(f, -x)","flip(f, -x)","not flip(flip(f), x)"]}
{"goal":"flip(flip(f), x) = f(x)","proof":["flip(flip(f), x) != f(x) or f(x)","flip(f, -x) = f(--x)","--x = x","flip(flip(f), x) = f(--x)","flip(flip(f), x) = f(x)","f(x)","not flip(flip(f), x)","flip(flip(f), x)"]}
{"goal":"flip_flip","proof":["let s0: Real satisfy { not flip(flip(f), s0) or not f(s0) and (flip(flip(f), s0) or f(s0)) }","flip(flip(f), s0) = f(s0)","f(s0)","not flip(flip(f), s0)","flip(flip(f), s0)"]}
{"goal":"f(-y)","proof":["flip(f, y) = f(-y)"]}
{"goal":"x <= -y","proof":["not is_lower_bound(f, x) or not f(-y) or x <= -y","not is_lower_bound(f, x) or not f(-y)"]}
{"goal":"-x >= y","proof":["not -x < y or -y < x","-x >= y or -x < y","-x < y","not -y >= x or not -y < x","-y >= x = x <= -y","-y >= x","-y < x","not -y < x"]}
{"goal":"lb_imp_flip_ub","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not flip(f, s0(flip(f), -x)) or -x >= s0(flip(f), -x)","not s0(flip(f), -x) <= -x or is_upper_bound(flip(f), -x)","is_upper_bound(flip(f), -x) or flip(f, s0(flip(f), -x))","-x >= s0(flip(f), -x) = s0(flip(f), -x) <= -x","flip(f, s0(flip(f), -x))","not s0(flip(f), -x) <= -x","-x >= s0(flip(f), -x)","not -x >= s0(flip(f), -x)"]}
{"goal":"f(-y)","proof":["flip(f, y) = f(-y)"]}
{"goal":"-y <= x","proof":["not is_upper_bound(f, x) or not f(-y) or -y <= x","not is_upper_bound(f, x) or not f(-y)"]}
{"goal":"-x <= y","proof":["not -y < x or -x < y","not -y <= x or -y < x or -y = x","not -x < y or -x <= y","not -x < y","--y = y","not -x <= --y","-x <= -x","-y < x or -y = x","not -y < x","-y = x"]}
{"goal":"ub_imp_flip_lb","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_lower_bound(x0, x1) or not x0(x2) or x1 <= x2 } and forall(x3: Real -> Bool, x4: Real) { is_lower_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real, x6: Real -> Bool) { not x5 <= s0(x6, x5) or is_lower_bound(x6, x5) } }","not flip(f, s0(flip(f), -x)) or -x <= s0(flip(f), -x)","not -x <= s0(flip(f), -x) or is_lower_bound(flip(f), -x)","is_lower_bound(flip(f), -x) or flip(f, s0(flip(f), -x))","flip(f, s0(flip(f), -x))","not -x <= s0(flip(f), -x)","-x <= s0(flip(f), -x)"]}
{"goal":"is_lower_bound(f, x)","proof":["not is_greatest_lower_bound(f, x) or is_lower_bound(f, x)"]}
{"goal":"is_upper_bound(flip(f), -x)","proof":["not is_lower_bound(f, x) or is_upper_bound(flip(f), -x)"]}
{"goal":"is_lower_bound(flip(flip(f)), -y)","proof":["not is_upper_bound(flip(f), y) or is_lower_bound(flip(flip(f)), -y)"]}
{"goal":"is_lower_bound(f, -y)","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_lower_bound(x0, x1) or not x0(x2) or x1 <= x2 } and forall(x3: Real -> Bool, x4: Real) { is_lower_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real, x6: Real -> Bool) { not x5 <= s0(x6, x5) or is_lower_bound(x6, x5) } }","not -y <= s0(f, -y) or is_lower_bound(f, -y)","not is_lower_bound(flip(flip(f)), -y) or not flip(flip(f), s0(f, -y)) or -y <= s0(f, -y)","is_lower_bound(f, -y) or f(s0(f, -y))","f(s0(f, -y))","flip(flip(f), s0(f, -y)) = f(s0(f, -y))","not -y <= s0(f, -y)","not flip(flip(f), s0(f, -y)) or -y <= s0(f, -y)","flip(flip(f), s0(f, -y))","not flip(flip(f), s0(f, -y))"]}
{"goal":"-y <= x","proof":["not is_greatest_lower_bound(f, x) or not is_lower_bound(f, -y) or -y <= x","not is_lower_bound(f, -y) or not is_greatest_lower_bound(f, x)"]}
{"goal":"-x <= y","proof":["not -y < x or -x < y","not -y <= x or -y < x or -y = x","not -x < y or -x <= y","not -x < y","--y = y","not -x <= --y","-x <= -x","-y < x or -y = x","not -y < x","-y = x"]}
{"goal":"is_least_upper_bound(flip(f), -x)","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real) { not is_least_upper_bound(x0, x1) or is_upper_bound(x0, x1) } and forall(x2: Real -> Bool, x3: Real, x4: Real) { not is_upper_bound(x2, x3) or not is_least_upper_bound(x2, x4) or x4 <= x3 } and forall(x5: Real -> Bool, x6: Real) { not is_upper_bound(x5, x6) or is_upper_bound(x5, s0(x5, x6)) or is_least_upper_bound(x5, x6) } and forall(x7: Real, x8: Real -> Bool) { not x7 <= s0(x8, x7) or not is_upper_bound(x8, x7) or is_least_upper_bound(x8, x7) } }","not is_upper_bound(flip(f), s0(flip(f), -x)) or -x <= s0(flip(f), -x)","not -x <= s0(flip(f), -x) or not is_upper_bound(flip(f), -x) or is_least_upper_bound(flip(f), -x)","not is_upper_bound(flip(f), -x) or is_upper_bound(flip(f), s0(flip(f), -x)) or is_least_upper_bound(flip(f), -x)","is_upper_bound(flip(f), s0(flip(f), -x))","not -x <= s0(flip(f), -x)","-x <= s0(flip(f), -x)"]}
{"goal":"glb_imp_flip_lub","proof":[]}
{"goal":"is_upper_bound(f, x)","proof":["not is_least_upper_bound(f, x) or is_upper_bound(f, x)"]}
{"goal":"is_lower_bound(flip(f), -x)","proof":["not is_upper_bound(f, x) or is_lower_bound(flip(f), -x)"]}
{"goal":"is_upper_bound(flip(flip(f)), -y)","proof":["not is_lower_bound(flip(f), y) or is_upper_bound(flip(flip(f)), -y)"]}
{"goal":"is_upper_bound(f, -y)","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real, x2: Real) { not is_upper_bound(x0, x1) or not x0(x2) or x2 <= x1 } and forall(x3: Real -> Bool, x4: Real) { is_upper_bound(x3, x4) or x3(s0(x3, x4)) } and forall(x5: Real -> Bool, x6: Real) { not s0(x5, x6) <= x6 or is_upper_bound(x5, x6) } }","not s0(f, -y) <= -y or is_upper_bound(f, -y)","not is_upper_bound(flip(flip(f)), -y) or not flip(flip(f), s0(f, -y)) or s0(f, -y) <= -y","is_upper_bound(f, -y) or f(s0(f, -y))","f(s0(f, -y))","flip(flip(f), s0(f, -y)) = f(s0(f, -y))","not s0(f, -y) <= -y","not flip(flip(f), s0(f, -y)) or s0(f, -y) <= -y","flip(flip(f), s0(f, -y))","not flip(flip(f), s0(f, -y))"]}
{"goal":"x <= -y","proof":["not is_least_upper_bound(f, x) or not is_upper_bound(f, -y) or x <= -y","not is_upper_bound(f, -y) or not is_least_upper_bound(f, x)"]}
{"goal":"y <= -x","proof":["not x < -y or y < -x","not x <= -y or x < -y or -y = x","not y < -x or y <= -x","not y < -x","--y = y","not --y <= -x","-x <= -x","x < -y or -y = x","not x < -y","-y = x"]}
{"goal":"lub_imp_flip_glb","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real) { not is_greatest_lower_bound(x0, x1) or is_lower_bound(x0, x1) } and forall(x2: Real -> Bool, x3: Real, x4: Real) { not is_lower_bound(x2, x3) or not is_greatest_lower_bound(x2, x4) or x3 <= x4 } and forall(x5: Real -> Bool, x6: Real) { not is_lower_bound(x5, x6) or is_lower_bound(x5, s0(x5, x6)) or is_greatest_lower_bound(x5, x6) } and forall(x7: Real -> Bool, x8: Real) { not s0(x7, x8) <= x8 or not is_lower_bound(x7, x8) or is_greatest_lower_bound(x7, x8) } }","not is_lower_bound(flip(f), s0(flip(f), -x)) or s0(flip(f), -x) <= -x","not s0(flip(f), -x) <= -x or not is_lower_bound(flip(f), -x) or is_greatest_lower_bound(flip(f), -x)","not is_lower_bound(flip(f), -x) or is_lower_bound(flip(f), s0(flip(f), -x)) or is_greatest_lower_bound(flip(f), -x)","is_lower_bound(flip(f), s0(flip(f), -x))","not s0(flip(f), -x) <= -x","s0(flip(f), -x) <= -x"]}
{"goal":"is_nonempty(flip(s))","proof":["let s0: Real -> Bool -> Real satisfy { forall(x0: Real -> Bool) { not is_nonempty(x0) or x0(s0(x0)) } and forall(x1: Real -> Bool, x2: Real) { not x1(x2) or is_nonempty(x1) } }","flip(flip(s), s0(s)) = s(s0(s))","flip(flip(s), s0(s)) = flip(s, -s0(s))","not is_nonempty(s) or s(s0(s))","not flip(s, -s0(s)) or is_nonempty(flip(s))","not flip(s, -s0(s))","s(s0(s))","flip(flip(s), s0(s))"]}
{"goal":"is_upper_bound(flip(s), -x)","proof":["not is_lower_bound(s, x) or is_upper_bound(flip(s), -x)"]}
{"goal":"exists(k0: Real) { is_least_upper_bound(flip(s), k0) }","proof":["let s0: (Real -> Bool, Real) -> Real satisfy { forall(x0: Real -> Bool, x1: Real) { not is_upper_bound(x0, x1) or not is_nonempty(x0) or is_least_upper_bound(x0, s0(x0, x1)) } }","not is_least_upper_bound(flip(s), s0(flip(s), -x))","not is_upper_bound(flip(s), -x) or not is_nonempty(flip(s)) or is_least_upper_bound(flip(s), s0(flip(s), -x))"]}
{"goal":"is_greatest_lower_bound(flip(flip(s)), -y)","proof":["not is_least_upper_bound(flip(s), y) or is_greatest_lower_bound(flip(flip(s)), -y)"]}
{"goal":"flip(flip(s)) = s","proof":["let s0: Real satisfy { not flip(flip(s), s0) or not s(s0) and (flip(flip(s), s0) or s(s0)) }","flip(flip(s), s0) != s(s0) or s(s0)","flip(flip(s), s0) = s(s0)","s(s0)","not flip(flip(s), s0)","flip(flip(s), s0)"]}
{"goal":"is_greatest_lower_bound(s, -y)","proof":["not is_greatest_lower_bound(flip(flip(s)), -y)"]}
{"goal":"lb_imp_glb","proof":["not is_greatest_lower_bound(s, -y)"]}
