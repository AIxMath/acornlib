{"goal":"const_false_satisfies_finite_constraint","proof":["let (s1: T -> Bool -> List<T>, s2: (T -> Bool, List<T>) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint<T>(x0) or not x0(x1) or s1(x0).contains(x1) } and forall(x2: T -> Bool, x3: List<T>) { x2(s2(x2, x3)) or finite_constraint<T>(x2) } and forall(x4: List<T>, x5: T -> Bool) { not x4.contains(s2(x5, x4)) or finite_constraint<T>(x5) } }","let s0: List<T> satisfy { true }","const_false(s2(const_false<T>, s0)) or finite_constraint<T>(const_false<T>)","const_false(s2(const_false<T>, s0))","not const_false(s2(const_false<T>, s0))"]}
{"goal":"list_contains_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List<T>, s1: (T -> Bool, List<T>) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint<T>(x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List<T>) { x2(s1(x2, x3)) or finite_constraint<T>(x2) } and forall(x4: List<T>, x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint<T>(x5) } }","not ts.contains(s1(ts.contains, ts)) or finite_constraint<T>(ts.contains)","ts.contains(s1(ts.contains, ts)) or finite_constraint<T>(ts.contains)","ts.contains(s1(ts.contains, ts))"]}
{"goal":"functional_insert_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List<T>, s1: (T -> Bool, List<T>) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint<T>(x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List<T>) { finite_constraint<T>(x2) or x2(s1(x2, x3)) } and forall(x4: List<T>, x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint<T>(x5) } }","List.cons(item, s0(f)) != List.cons(item, s0(f)) or not s0(f).contains(s1(functional_insert(f, item), List.cons(item, s0(f)))) or List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","List.cons(item, s0(f)) != List.cons(item, s0(f)) or s1(functional_insert(f, item), List.cons(item, s0(f))) != item or List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","not functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) = item or f(s1(functional_insert(f, item), List.cons(item, s0(f))))","not finite_constraint<T>(f) or not f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s0(f).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","not List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f)))) or finite_constraint<T>(functional_insert(f, item))","finite_constraint<T>(functional_insert(f, item)) or functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f))))","not List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","functional_insert(f, item, s1(functional_insert(f, item), List.cons(item, s0(f))))","s1(functional_insert(f, item), List.cons(item, s0(f))) != item or List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","not s0(f).contains(s1(functional_insert(f, item), List.cons(item, s0(f)))) or List.cons(item, s0(f)).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","not f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s0(f).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","s1(functional_insert(f, item), List.cons(item, s0(f))) != item","not s0(f).contains(s1(functional_insert(f, item), List.cons(item, s0(f))))","f(s1(functional_insert(f, item), List.cons(item, s0(f)))) or s1(functional_insert(f, item), List.cons(item, s0(f))) = item","not f(s1(functional_insert(f, item), List.cons(item, s0(f))))","f(s1(functional_insert(f, item), List.cons(item, s0(f))))"]}
{"goal":"functional_remove_satisfies_finite_constraint","proof":["let (s0: T -> Bool -> List<T>, s1: (T -> Bool, List<T>) -> T) satisfy { forall(x0: T -> Bool, x1: T) { not finite_constraint<T>(x0) or not x0(x1) or s0(x0).contains(x1) } and forall(x2: T -> Bool, x3: List<T>) { x2(s1(x2, x3)) or finite_constraint<T>(x2) } and forall(x4: List<T>, x5: T -> Bool) { not x4.contains(s1(x5, x4)) or finite_constraint<T>(x5) } }","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) = item or f(s1(functional_remove(f, item), s0(f)))","not finite_constraint<T>(f) or not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","not s0(f).contains(s1(functional_remove(f, item), s0(f))) or finite_constraint<T>(functional_remove(f, item))","not functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or s1(functional_remove(f, item), s0(f)) != item","functional_remove(f, item, s1(functional_remove(f, item), s0(f))) or finite_constraint<T>(functional_remove(f, item))","not s0(f).contains(s1(functional_remove(f, item), s0(f)))","functional_remove(f, item, s1(functional_remove(f, item), s0(f)))","not f(s1(functional_remove(f, item), s0(f))) or s0(f).contains(s1(functional_remove(f, item), s0(f)))","s1(functional_remove(f, item), s0(f)) != item","not f(s1(functional_remove(f, item), s0(f)))","f(s1(functional_remove(f, item), s0(f)))"]}
{"goal":"exists(k0: T -> Bool) { finite_constraint<T>(k0) }","proof":["not finite_constraint<T>(const_false<T>)"]}
{"goal":"insert_contains","proof":["FiniteSet.new<T>(functional_insert(set.contains, item)) = set.insert(item)","not finite_constraint<T>(functional_insert(set.contains, item)) or not functional_insert(set.contains, item, item) or FiniteSet.new<T>(functional_insert(set.contains, item)).contains(item)","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_insert(set.contains, item))","item != item or functional_insert(set.contains, item, item)","finite_constraint<T>(set.contains)","not FiniteSet.new<T>(functional_insert(set.contains, item)).contains(item)","functional_insert(set.contains, item, item)","not finite_constraint<T>(functional_insert(set.contains, item))"]}
{"goal":"remove_does_not_contain","proof":["FiniteSet.new<T>(functional_remove(set.contains, item)) = set.remove(item)","not FiniteSet.new<T>(functional_remove(set.contains, item)).contains(item) or not finite_constraint<T>(functional_remove(set.contains, item)) or functional_remove(set.contains, item, item)","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_remove(set.contains, item))","not functional_remove(set.contains, item, item) or item != item","finite_constraint<T>(set.contains)","FiniteSet.new<T>(functional_remove(set.contains, item)).contains(item)","not functional_remove(set.contains, item, item)","not finite_constraint<T>(functional_remove(set.contains, item))"]}
{"goal":"finite_constraint<T>(set.contains)","proof":["finite_constraint<T>(set.contains)"]}
{"goal":"finite_constraint<T>(set.insert(other).contains)","proof":["finite_constraint<T>(set.insert(other).contains)"]}
{"goal":"insert_other_still_contains","proof":["FiniteSet.new<T>(functional_insert(set.contains, other)) = set.insert(other)","not finite_constraint<T>(functional_insert(set.contains, other)) or not functional_insert(set.contains, other, item) or FiniteSet.new<T>(functional_insert(set.contains, other)).contains(item)","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_insert(set.contains, other))","not set.contains(item) or functional_insert(set.contains, other, item)","not FiniteSet.new<T>(functional_insert(set.contains, other)).contains(item)","finite_constraint<T>(functional_insert(set.contains, other))","not functional_insert(set.contains, other, item)"]}
{"goal":"finite_constraint<T>(set.contains)","proof":["finite_constraint<T>(set.contains)"]}
{"goal":"finite_constraint<T>(set.remove(other).contains)","proof":["finite_constraint<T>(set.remove(other).contains)"]}
{"goal":"remove_other_still_contains","proof":["FiniteSet.new<T>(functional_remove(set.contains, other)) = set.remove(other)","not finite_constraint<T>(functional_remove(set.contains, other)) or not functional_remove(set.contains, other, item) or FiniteSet.new<T>(functional_remove(set.contains, other)).contains(item)","not set.contains(item) or functional_remove(set.contains, other, item) or other = item","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_remove(set.contains, other))","not FiniteSet.new<T>(functional_remove(set.contains, other)).contains(item)","finite_constraint<T>(functional_remove(set.contains, other))","not set.contains(item) or functional_remove(set.contains, other, item)","not functional_remove(set.contains, other, item)"]}
{"goal":"finite_constraint<T>(set.contains)","proof":["finite_constraint<T>(set.contains)"]}
{"goal":"finite_constraint<T>(set.insert(other).contains)","proof":["finite_constraint<T>(set.insert(other).contains)"]}
{"goal":"insert_other_contains_imp_contains","proof":["FiniteSet.new<T>(functional_insert(set.contains, other)) = set.insert(other)","not FiniteSet.new<T>(functional_insert(set.contains, other)).contains(item) or not finite_constraint<T>(functional_insert(set.contains, other)) or functional_insert(set.contains, other, item)","not functional_insert(set.contains, other, item) or other = item or set.contains(item)","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_insert(set.contains, other))","finite_constraint<T>(functional_insert(set.contains, other))","not functional_insert(set.contains, other, item) or set.contains(item)","FiniteSet.new<T>(functional_insert(set.contains, other)).contains(item)","functional_insert(set.contains, other, item)"]}
{"goal":"finite_constraint<T>(set.contains)","proof":["finite_constraint<T>(set.contains)"]}
{"goal":"finite_constraint<T>(set.remove(other).contains)","proof":["finite_constraint<T>(set.remove(other).contains)"]}
{"goal":"remove_other_contains_imp_contains","proof":["FiniteSet.new<T>(functional_remove(set.contains, other)) = set.remove(other)","not FiniteSet.new<T>(functional_remove(set.contains, other)).contains(item) or not finite_constraint<T>(functional_remove(set.contains, other)) or functional_remove(set.contains, other, item)","not functional_remove(set.contains, other, item) or other = item or set.contains(item)","not finite_constraint<T>(set.contains) or finite_constraint<T>(functional_remove(set.contains, other))","finite_constraint<T>(functional_remove(set.contains, other))","not functional_remove(set.contains, other, item) or set.contains(item)","FiniteSet.new<T>(functional_remove(set.contains, other)).contains(item)","functional_remove(set.contains, other, item)"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["not set.insert(other).contains(item)","not set.contains(item) or set.insert(other).contains(item)"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.insert(other).contains(item)","proof":["not set.insert(other).contains(item) or set.contains(item) or other = item"]}
{"goal":"set.contains(item) = set.insert(other).contains(item)","proof":["set.insert(other).contains(item)"]}
{"goal":"insert_other_contains_eq","proof":["set.contains(item)","not set.insert(other).contains(item)"]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["not set.remove(other).contains(item)","not set.contains(item) or set.remove(other).contains(item) or other = item"]}
{"goal":"not set.contains(item)","proof":[]}
{"goal":"not set.remove(other).contains(item)","proof":["not set.remove(other).contains(item) or set.contains(item) or other = item"]}
{"goal":"set.contains(item) = set.remove(other).contains(item)","proof":["set.remove(other).contains(item)"]}
{"goal":"remove_other_contains_eq","proof":["set.contains(item)","not set.remove(other).contains(item)"]}
{"goal":"set.remove(item).insert(item).contains != set.contains","proof":["FiniteSet.new<T>(set.contains) = set","FiniteSet.new<T>(set.remove(item).insert(item).contains) = set.remove(item).insert(item)"]}
{"goal":"exists(k0: T) { set.remove(item).insert(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { not set.remove(item).insert(item).contains(s0) or not set.contains(s0) and (set.remove(item).insert(item).contains(s0) or set.contains(s0)) }","set.remove(item).insert(item).contains(s0) = set.contains(s0)","set.contains(s0)","set.remove(item).insert(item).contains(s0)"]}
{"goal":"set.remove(item).contains(t)","proof":["not set.contains(t) or set.remove(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.remove(item).contains(t) or set.remove(item).insert(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.remove(item).contains(t) or set.contains(t) or t = item","not set.remove(item).insert(item).contains(t) or set.remove(item).contains(t) or t = item","set.remove(item).contains(t)"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":["not set.remove(item).insert(item).contains(item)","set.remove(item).insert(item).contains(item)"]}
{"goal":"false","proof":[]}
{"goal":"remove_then_insert","proof":[]}
{"goal":"set.insert(item).remove(item).contains != set.contains","proof":["FiniteSet.new<T>(set.contains) = set","FiniteSet.new<T>(set.insert(item).remove(item).contains) = set.insert(item).remove(item)"]}
{"goal":"exists(k0: T) { set.insert(item).remove(item).contains(k0) != set.contains(k0) }","proof":["let s0: T satisfy { not set.insert(item).remove(item).contains(s0) or not set.contains(s0) and (set.insert(item).remove(item).contains(s0) or set.contains(s0)) }","set.insert(item).remove(item).contains(s0) = set.contains(s0)","set.contains(s0)","set.insert(item).remove(item).contains(s0)"]}
{"goal":"false","proof":["not set.insert(item).contains(t) or set.insert(item).remove(item).contains(t) or t = item","not set.contains(t) or set.insert(item).contains(t)","set.insert(item).contains(t)"]}
{"goal":"set.insert(item).contains(t)","proof":["not set.insert(item).remove(item).contains(t) or set.insert(item).contains(t) or t = item"]}
{"goal":"false","proof":["not set.insert(item).contains(t) or set.contains(t) or t = item"]}
{"goal":"item = t","proof":[]}
{"goal":"not set.contains(t)","proof":[]}
{"goal":"false","proof":["not set.insert(item).remove(item).contains(item)"]}
{"goal":"insert_then_remove","proof":[]}
