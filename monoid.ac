// AddComm represents a commutative, additive monoid.
typeclass M: AddComm {
    zero: M

    add: (M, M) -> M

    associative(a: M, b: M, c: M) {
        (a + b) + c = a + (b + c)
    }

    // The identity element must satisfy the identity property
    identity_right(a: M) {
        a + M.zero = a
    }

    // Other direction of the identity property
    identity_left(a: M) {
        M.zero + a = a
    }

    commutative(a: M, b: M) {
        a + b = b + a
    }
}

// MulComm represents a commutative, multiplicative monoid.
typeclass M: MulComm {
    one: M

    mul: (M, M) -> M

    associative(a: M, b: M, c: M) {
        (a * b) * c = a * (b * c)
    }

    // The identity element must satisfy the identity property
    identity_right(a: M) {
        a * M.one = a
    }

    // Other direction of the identity property
    identity_left(a: M) {
        M.one * a = a
    }

    commutative(a: M, b: M) {
        a * b = b * a
    }
}

from nat import Nat

define pow<M: MulComm>(base: M, exp: Nat) -> M {
    match exp {
        Nat.0 {
            M.one
        }
        Nat.suc(n) {
            base * pow(base, n)
        }
    }
}

// Proof that a^n * a^m = a^(n+m)
theorem pow_add<M: MulComm>(a: M, n: Nat, m: Nat) {
    pow(a, n) * pow(a, m) = pow(a, n + m)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { pow_add(a, x, m) }

    // Base case: a^0 * a^m = a^(0+m)
    pow(a, Nat.0) * pow(a, m) = M.one * pow(a, m)
    M.identity_left(pow(a, m))
    pow(a, Nat.0) * pow(a, m) = pow(a, m)
    pow(a, Nat.0 + m) = pow(a, m)
    pow_add(a, Nat.0, m)
    f(Nat.0)

    // Inductive step
    forall(x: Nat) {
        if f(x) {
            pow_add(a, x, m)
            pow(a, x) * pow(a, m) = pow(a, x + m)

            // Now prove for x.suc
            pow(a, x.suc) * pow(a, m) = (a * pow(a, x)) * pow(a, m)
            M.associative(a, pow(a, x), pow(a, m))
            pow(a, x.suc) * pow(a, m) = a * (pow(a, x) * pow(a, m))
            pow(a, x.suc) * pow(a, m) = a * pow(a, x + m)
            pow(a, x.suc) * pow(a, m) = pow(a, (x + m).suc)
            pow(a, x.suc) * pow(a, m) = pow(a, x.suc + m)
            pow_add(a, x.suc, m)
            f(x.suc)
        }
    }

    pow_add(a, n, m)
}
