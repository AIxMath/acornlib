from nat import Nat
from rat import Rat
from real_base import is_cut, is_lower, is_greatest, has_greatest, is_dedekind_cut
from real_ring import Real, converges, converges_to, limit

// This file proves theorems about sets of real numbers.

class Real {
    // Placeholder to let other modules import Real from here.
}

// Not strict.
define is_upper_bound(s: Real -> Bool, x: Real) -> Bool {
    forall(y: Real) {
        s(y) implies y <= x
    }
}

define is_lower_bound(s: Real -> Bool, x: Real) -> Bool {
    forall(y: Real) {
        s(y) implies x <= y
    }
}

define is_least_upper_bound(s: Real -> Bool, x: Real) -> Bool {
    is_upper_bound(s, x) and
    forall(y: Real) {
        is_upper_bound(s, y) implies x <= y
    }
}

define is_greatest_lower_bound(s: Real -> Bool, x: Real) -> Bool {
    is_lower_bound(s, x) and
    forall(y: Real) {
        is_lower_bound(s, y) implies y <= x
    }
}

define is_nonempty(s: Real -> Bool) -> Bool {
    exists(x: Real) {
        s(x)
    }
}

// The supremum condition on s is that it's nonempty, and has
// an upper bound.
// sup_cut is the Dedekind cut that will be the supremum of s.
// First we define it, then we prove that it is a Dedekind cut.
define sup_cut(s: Real -> Bool, r: Rat) -> Bool {
    not is_upper_bound(s, Real.from_rat(r))
} 

theorem sup_cut_is_cut(s: Real -> Bool, ub: Real) {
    is_nonempty(s) and is_upper_bound(s, ub)
    implies
    is_cut(sup_cut(s))
} by {
    let x: Real satisfy {
        s(x)
    }
    
    let r1: Rat satisfy {
        Real.from_rat(r1) < x
    }
    
    not is_upper_bound(s, Real.from_rat(r1))
    sup_cut(s, r1)
    
    let r2: Rat satisfy {
        Real.from_rat(r2) > ub
    }
    
    // Show that r2 is an upper bound of s
    forall(y: Real) {
        if s(y) {
            y <= ub
            ub < Real.from_rat(r2)
            y < Real.from_rat(r2)
            y <= Real.from_rat(r2)
        }
    }
    is_upper_bound(s, Real.from_rat(r2))
    not sup_cut(s, r2)
}

theorem sup_cut_is_lower(s: Real -> Bool, ub: Real) {
    is_nonempty(s) and is_upper_bound(s, ub)
    implies
    is_lower(sup_cut(s))
} by {
    forall(x: Rat, y: Rat) {
        if sup_cut(s, y) and x < y {
            let z: Real satisfy {
                s(z) and z > Real.from_rat(y)
            }      
            z > Real.from_rat(x)            
            not is_upper_bound(s, Real.from_rat(x))
            sup_cut(s, x)
        }
    }
}
 
theorem sup_cut_not_has_greatest(s: Real -> Bool, ub: Real) {
    is_nonempty(s) and is_upper_bound(s, ub)
    implies
    not has_greatest(sup_cut(s))
} by {
    if has_greatest(sup_cut(s)) {
        let q: Rat satisfy {
            is_greatest(sup_cut(s), q)
        }
        
        sup_cut(s, q)
        not is_upper_bound(s, Real.from_rat(q))
        let z: Real satisfy {
            s(z) and z > Real.from_rat(q)
        }
        
        let q_prime: Rat satisfy {
            q < q_prime and Real.from_rat(q_prime) < z
        }
        
        // Since Real.from_rat(q_prime) < z and z is in s,
        // Real.from_rat(q_prime) is not an upper bound for s
        not is_upper_bound(s, Real.from_rat(q_prime))
        
        // Therefore q_prime is in the cut
        sup_cut(s, q_prime)
        
        // But q < q_prime, contradicting our assumption
        not q_prime <= q
        not is_greatest(sup_cut(s), q)
        false
    }
}

theorem sup_cut_is_dedekind_cut(s: Real -> Bool, ub: Real) {
    is_nonempty(s) and is_upper_bound(s, ub)
    implies
    is_dedekind_cut(sup_cut(s))
}

theorem ub_imp_lub(s: Real -> Bool, x: Real) {
    is_nonempty(s) and is_upper_bound(s, x)
    implies exists(y: Real) {
        is_least_upper_bound(s, y)
    }
} by {
    is_dedekind_cut(sup_cut(s))
    let y: Real = Real.new(sup_cut(s))
    
    // Part 1: Show y is an upper bound of s
    forall(z: Real) {
        if s(z) {
            if z > y {
                let q: Rat satisfy {
                    z > Real.from_rat(q) and Real.from_rat(q) > y
                }
                not sup_cut(s, q)
                is_upper_bound(s, Real.from_rat(q))
                z <= Real.from_rat(q)
                false
            }
        }
    }
    is_upper_bound(s, y)
    
    // Part 2: Show y is the least upper bound
    forall(w: Real) {
        if is_upper_bound(s, w) {
            // We'll prove y <= w by contradiction
            if y > w {
                let q: Rat satisfy {
                    y > Real.from_rat(q) and Real.from_rat(q) > w
                }
                sup_cut(s, q)
                not is_upper_bound(s, Real.from_rat(q))
                let z: Real satisfy {
                    s(z) and z > Real.from_rat(q)
                }
                z <= w
                Real.from_rat(q) > w
                z > Real.from_rat(q)
                z > w
                false 
            }
        }
    }    
}

define flip(f: Real -> Bool, x: Real) -> Bool {
    f(-x)
}

theorem flip_flip(f: Real -> Bool) {
    flip(flip(f)) = f
} by {
    let ff: Real -> Bool = flip(f)
    forall(x: Real) {
        flip(ff, x) = ff(-x)
        flip(flip(f), x) = flip(f)(-x)
        flip(flip(f), x) = f(x)
    }
}

theorem lb_imp_flip_ub(f: Real -> Bool, x: Real) {
    is_lower_bound(f, x) implies is_upper_bound(flip(f), -x)
}

theorem ub_imp_flip_lb(f: Real -> Bool, x: Real) {
    is_upper_bound(f, x) implies is_lower_bound(flip(f), -x)
}

theorem glb_imp_flip_lub(f: Real -> Bool, x: Real) {
    is_greatest_lower_bound(f, x)
    implies is_least_upper_bound(flip(f), -x)
} by {
    is_lower_bound(f, x)
    is_upper_bound(flip(f), -x)
    
    forall(y: Real) {
        if is_upper_bound(flip(f), y) {
            is_lower_bound(flip(flip(f)), -y)
            is_lower_bound(f, -y)
            -y <= x
            -x <= y
        }
    }
    is_least_upper_bound(flip(f), -x)
}

theorem lub_imp_flip_glb(f: Real -> Bool, x: Real) {
    is_least_upper_bound(f, x)
    implies is_greatest_lower_bound(flip(f), -x)
} by {
    is_upper_bound(f, x)
    is_lower_bound(flip(f), -x)
    
    forall(y: Real) {
        if is_lower_bound(flip(f), y) {
            is_upper_bound(flip(flip(f)), -y)
            is_upper_bound(f, -y)
            x <= -y
            y <= -x
        }
    }
}

// theorem lb_imp_glb(s: Real -> Bool, x: Real) {
//     is_nonempty(s) and is_lower_bound(s, x)
//     implies exists(y: Real) {
//         is_greatest_lower_bound(s, y)
//     }
// } by {
//     define neg_s(z: Real) -> Bool {
//         s(-z)
//     }
//     is_nonempty(neg_s)
//     is_upper_bound(neg_s, -x)
//     let y: Real satisfy {
//         is_least_upper_bound(neg_s, y)
//     }
//     is_upper_bound(neg_s, y)
//     forall(x: Real) {
//         if s(x) {
//             neg_s(-x)
//             -y <= x
//         }
//     }
//     is_lower_bound(s, -y)
//     forall(z: Real) {
//         if is_lower_bound(s, z) {
//             is_upper_bound(neg_s, -z)
//             z <= -y
//         }
//     }
//     is_greatest_lower_bound(s, -y)
// }