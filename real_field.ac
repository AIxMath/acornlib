from nat import Nat
from rat import Rat
from real_ring import lift_seq, converges, converges_to, limit, cauchy_bound, eventual_lb, tail_bound, neg_rat_seq, limit_rat, rat_seq, mul_rat_seq
from real_series import Real, neg_seq
numerals Real

// This file defines real division and proves theorems about it.

define recip_rat_seq(a: Nat -> Rat, n: Nat) -> Rat {
    a(n).reciprocal
}

theorem neg_recip_rat_seq(a: Nat -> Rat) {
    neg_rat_seq(recip_rat_seq(a)) = recip_rat_seq(neg_rat_seq(a))
}

// Division works for positive reals
theorem recip_rat_seq_pos_converges(a: Nat -> Rat, b: Real) {
    converges_to(lift_seq(a), b) and b.is_positive
    implies converges(lift_seq(recip_rat_seq(a)))
} by {
    let b_lb: Rat satisfy {
        Rat.0 < b_lb and Real.from_rat(b_lb) < b
    }
    let lsa: Nat -> Real = lift_seq(a)
    eventual_lb(lsa, Real.from_rat(b_lb))
    let n1: Nat satisfy {
        forall(i: Nat) {
            n1 < i implies Real.from_rat(b_lb) <= lsa(i)
        }
    }
    forall(i: Nat) {
        if n1 < i {
            b_lb <= a(i)
        }
    }
    
    forall(eps: Real) {
        if eps.is_positive {
            let reps: Rat satisfy {
                reps.is_positive and Real.from_rat(reps) < eps
            }

            // We had to work backwards to find this condition
            (b_lb * b_lb).is_positive
            (reps * (b_lb * b_lb)).is_positive
            let eps2: Rat satisfy {
                eps2.is_positive and eps2 < reps * (b_lb * b_lb)
            }
            eps2 / (b_lb * b_lb) < reps
            let eps3: Rat satisfy {
                eps3 + eps3 = eps2
            }
            eps3.is_positive
            
            // Find where the original sequence is within eps_bound of b
            let n2: Nat satisfy {
                tail_bound(lift_seq(a), b, n2, Real.from_rat(eps3))
            }
            forall(i: Nat) {
                if n2 <= i {
                    n2 <= Nat.0 + i
                    n2 <= Nat.0 + (i + Nat.0)
                    tail_bound(lift_seq(a), Real.new(b.gt_rat), n2, Real.from_rat(eps3))
                    lift_seq(a)(i).is_close(b, Real.from_rat(eps3))
                }
            }
            
            // Choose a bound above both
            let n: Nat satisfy {
                n1 < n and n2 < n
            }
            
            // Now we show that the reciprocal sequence satisfies the Cauchy property
            forall(i: Nat, j: Nat) {
                if n <= i and n <= j {
                    // Both terms are close to b
                    n2 <= i
                    lift_seq(a)(i).is_close(b, Real.from_rat(eps3))
                    n2 <= j
                    lift_seq(a)(j).is_close(b, Real.from_rat(eps3))
                    
                    // So their diff is small
                    lift_seq(a, i).is_close(lift_seq(a, j), Real.from_rat(eps3) + Real.from_rat(eps3))
                    a(i).is_close(a(j), eps2)
                    let diff: Rat = a(j) - a(i)
                    diff.abs < eps2

                    // Both terms are non-zero
                    n1 <= i
                    b_lb <= a(i)
                    a(i) != Rat.0
                    n1 <= j
                    b_lb <= a(j)
                    a(j) != Rat.0

                    // So their product is large
                    let prod: Rat = a(i) * a(j)
                    b_lb * b_lb <= prod
                    b_lb * b_lb <= prod.abs
                    (b_lb * b_lb).is_positive
                    prod.abs.is_positive

                    diff.abs * (b_lb * b_lb) < eps2 * prod.abs
                    diff.abs < eps2 * prod.abs / (b_lb * b_lb)
                    eps2 * prod.abs / (b_lb * b_lb) = (eps2 / (b_lb * b_lb)) * prod.abs 
                    diff.abs < (eps2 / (b_lb * b_lb)) * prod.abs 
                    diff.abs / prod.abs < eps2 / (b_lb * b_lb)
                    diff.abs / prod.abs = (diff / prod).abs
                    (diff / prod).abs < eps2 / (b_lb * b_lb)
                    (diff / prod).abs < reps
                    ((a(j) - a(i)) / (a(i) * a(j))).abs < reps
                    a(i).reciprocal - a(j).reciprocal = ((a(j) - a(i)) / (a(i) * a(j)))
                    (a(i).reciprocal - a(j).reciprocal).abs < reps
                    a(i).reciprocal.is_close(a(j).reciprocal, reps)
                    recip_rat_seq(a)(i).is_close(recip_rat_seq(a)(j), reps)
                    lift_seq(recip_rat_seq(a))(i).is_close(lift_seq(recip_rat_seq(a))(j), Real.from_rat(reps))
                    lift_seq(recip_rat_seq(a))(i).is_close(lift_seq(recip_rat_seq(a))(j), eps)
                }
            }
            
            // This establishes the Cauchy criterion
            cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)
        }
    }
    
    // Therefore the sequence converges
    converges(lift_seq(recip_rat_seq(a)))
}

// Division works for all nonzero reals
theorem recip_rat_seq_converges(a: Nat -> Rat, b: Real) {
    converges_to(lift_seq(a), b) and b != Real.0
    implies converges(lift_seq(recip_rat_seq(a)))
} by {
    if b.is_positive {
        // This is the previous theorem
        converges(lift_seq(recip_rat_seq(a)))
    } else {
        b.is_negative
        (-b).is_positive
        limit(lift_seq(a)) = b
        converges_to(neg_seq(lift_seq(a)), -b)
        converges_to(lift_seq(neg_rat_seq(a)), -b)
        converges(lift_seq(recip_rat_seq(neg_rat_seq(a))))
        recip_rat_seq(neg_rat_seq(a)) = neg_rat_seq(recip_rat_seq(a))
        converges(lift_seq(neg_rat_seq(recip_rat_seq(a))))
        lift_seq(neg_rat_seq(recip_rat_seq(a))) = neg_seq(lift_seq(recip_rat_seq(a)))
        converges(neg_seq(lift_seq(recip_rat_seq(a))))
        converges(lift_seq(recip_rat_seq(a)))
    }
}

class Real {
    define reciprocal(self) -> Real {
        if self = Real.0 {
            Real.0
        } else {
            limit_rat(recip_rat_seq(rat_seq(self)))
        }
    }
}

// theorem pos_imp_eventually_nonzero(a: Nat -> Real) {
//     converges(a) and limit(a).is_positive
//     implies exists(n: Nat) {
//         forall(i: Nat) {
//             n < i implies a(i) != Real.0
//         }
//     }
// }

// theorem nonzero_imp_eventually_nonzero(a: Nat -> Real) {
//     converges(a) and limit(a) != Real.0
//     implies exists(n: Nat) {
//         forall(i: Nat) {
//             n < i implies a(i) != Real.0
//         }
//     }
// }

// theorem mul_reciprocal(a: Real) {
//     a != Real.0 implies a * a.reciprocal = Real.1
// } by {
//     a = limit_rat(rat_seq(a))
//     a.reciprocal = limit_rat(recip_rat_seq(rat_seq(a)))
//     a * a.reciprocal = limit_rat(rat_seq(a)) * limit_rat(recip_rat_seq(rat_seq(a)))
//     let n: Nat satisfy {
//         forall(i: Nat) {
//             n < i implies rat_seq(a, i) != Rat.0
//         }
//     }
//     a * a.reciprocal = limit_rat(mul_rat_seq(rat_seq(a), recip_rat_seq(rat_seq(a))))
// }