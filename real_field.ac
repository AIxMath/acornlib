from nat import Nat
from rat import Rat
from real_ring import lift_seq, converges, converges_to, limit, cauchy_bound, eventual_lb, tail_bound
from real_series import Real
numerals Real

// This file defines real division and proves theorems about it.

define recip_rat_seq(a: Nat -> Rat, n: Nat) -> Rat {
    a(n).reciprocal
}

// theorem recip_rat_seq_pos_converges(a: Nat -> Rat, b: Real) {
//     converges_to(lift_seq(a), b) and b.is_positive
//     implies converges(lift_seq(recip_rat_seq(a)))
// } by {
//     let b_lb: Real satisfy {
//         0 < b_lb and b_lb < b
//     }
//     eventual_lb(lift_seq(a), b_lb)
//     let n1: Nat satisfy {
//         forall(i: Nat) {
//             n1 < i implies b_lb <= lift_seq(a)(i)
//         }
//     }
    
//     forall(eps: Real) {
//         if eps.is_positive {
//             // Find a bound based on b and epsilon
//             let b_sq: Real = b * b
//             b_sq.is_positive
//             let eps_bound: Real satisfy {
//                 eps_bound.is_positive and eps_bound * b_sq < eps
//             }
            
//             // Find where the original sequence is within eps_bound of b
//             let n2: Nat satisfy {
//                 tail_bound(lift_seq(a), b, n2, eps_bound)
//             }
//             forall(i: Nat) {
//                 if n2 <= i {
//                     n2 <= Nat.0 + i
//                     n2 <= Nat.0 + (i + Nat.0)
//                     lift_seq(a, Nat.0 + (i + Nat.0)).is_close(b, eps_bound)
//                     lift_seq(a, Nat.0 + i).is_close(b, eps_bound)
//                     lift_seq(a)(i).is_close(b, eps_bound)
//                 }
//             }
            
//             // Choose a bound above both
//             let n: Nat satisfy {
//                 n1 < n and n2 < n
//             }
            
//             // Now we show that the reciprocal sequence satisfies the Cauchy property
//             forall(i: Nat, j: Nat) {
//                 if n <= i and n <= j {
//                     // Both terms are close to b
//                     n2 <= i
//                     lift_seq(a)(i).is_close(b, eps_bound)
//                     n2 <= j
//                     lift_seq(a)(j).is_close(b, eps_bound)
                    
//                     // Both terms are non-zero
//                     n1 <= i
//                     b_lb <= lift_seq(a)(i)
//                     a(i) != Rat.0
//                     n1 <= j
//                     b_lb <= lift_seq(a)(j)
//                     a(j) != Rat.0
                    
//                     // Express reciprocals using formula for distance
//                     // |1/a(i) - 1/a(j)| = |a(j) - a(i)|/|a(i)a(j)|
//                     // Numerator is bounded by eps_bound
//                     // Denominator is bounded below because a(i) and a(j) are bounded below
//                     lift_seq(recip_rat_seq(a))(i).is_close(lift_seq(recip_rat_seq(a))(j), eps)
//                 }
//             }
            
//             // This establishes the Cauchy criterion
//             cauchy_bound(lift_seq(recip_rat_seq(a)), n, eps)
//         }
//     }
    
//     // Therefore the sequence converges
//     converges(lift_seq(recip_rat_seq(a)))
// }