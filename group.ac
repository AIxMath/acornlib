typeclass G: Group { 
    // The identity
    e: G

    // The group operation
    mul: (G, G) -> G

    // The inverse operation
    inverse: G -> G

    // Groups must be associative
    associative(a: G, b: G, c: G) {
        (a * b) * c = a * (b * c)
    }
  
    // The identity element must satisfy the identity property
    identity_right(a: G) {
        a * G.e = a
    }
  
    // Other direction of the identity property
    identity_left(a: G) {
        G.e * a = a
    }

    // We only need right-inverse, we can prove left-inverse from it.
    inverse_right(a: G) {
        a * a.inverse = G.e
    }
}

// This direction is proven rather than assumed
theorem inverse_left<G: Group>(a: G) {
    a.inverse * a = G.e
} by {
    (a.inverse * a) * a.inverse = a.inverse
    (a.inverse * a) * a.inverse * a.inverse.inverse = a.inverse * a.inverse.inverse
    (a.inverse * a) * (a.inverse * a.inverse.inverse) = a.inverse * a.inverse.inverse
    (a.inverse * a) * G.e = G.e
}

theorem inverse_inverse<G: Group>(a: G) {
    a.inverse.inverse = a
} by {
    a * a.inverse = G.e
    a * a.inverse * a.inverse.inverse = a.inverse.inverse
}

theorem left_cancel<G: Group>(a: G, b: G, c: G) {
    a * b = a * c implies b = c
} by {
    a.inverse * (a * b) = a.inverse * (a * c)
}

theorem right_cancel<G: Group>(a: G, b: G, c: G) {
    b * a = c * a implies b = c
} by {
    (b * a) * a.inverse = (c * a) * a.inverse
}

theorem inverse_mul<G: Group>(a: G, b: G) {
    (a * b).inverse = b.inverse * a.inverse
} by {
    (a * b).inverse * (a * b) = G.e
    (a * b).inverse * a = b.inverse
}

// We define subgroups with the "bundled subgroups" technique, so a subgroup "carries along"
// its group.

define identity_constraint<G: Group>(contains: G -> Bool) -> Bool {
    contains(G.e)
}

define closure_constraint<G: Group>(contains: G -> Bool) -> Bool {
    forall(a: G, b: G) {
        contains(a) and contains(b) implies contains(a * b)
    }
}

define inverse_constraint<G: Group>(contains: G -> Bool) -> Bool {
    forall(a: G) {
        contains(a) implies contains(a.inverse)
    }
}

define subgroup_constraint<G: Group>(contains: G -> Bool) -> Bool {
    identity_constraint(contains) and closure_constraint(contains) and inverse_constraint(contains)
}

define is_identity<G: Group>(g: G) -> Bool {
    g = G.e
}

theorem identity_subgroup_constraint<G: Group> {
    subgroup_constraint(is_identity<G>)
} by {
    identity_constraint(is_identity<G>)
    closure_constraint(is_identity<G>)
    inverse_constraint(is_identity<G>)
}

structure Subgroup<G: Group> {
    contains: G -> Bool
} constraint {
    subgroup_constraint(contains)
}

let identity_subgroup<G: Group>: Subgroup<G> = Subgroup.new(is_identity<G>)

theorem identity_subgroup_only_has_identity<G: Group>(g: G) {
    identity_subgroup<G>.contains(g) implies g = G.e
}

// A predicate to check whether a function is a homomorphism.
define is_hom<G: Group, H: Group>(f: G -> H) -> Bool {
    forall(a: G, b: G) {
        f(a * b) = f(a) * f(b)
    }
}

// The trivial homomorphism maps every element of G to the identity element of H.
let trivial_hom<G: Group, H: Group>: G -> H = function(a: G) {
    H.e
}

theorem trivial_hom_is_hom<G: Group, H: Group>(a: G, b: G) {
    is_hom(trivial_hom<G, H>)
}

structure GroupHom<G: Group, H: Group> {
    hom : G -> H
} constraint {
    is_hom(hom)
}