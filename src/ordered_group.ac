from nat import Nat
from group import Group, has_finite_order, is_torsion_free
from order import PartialOrder, LinearOrder

/// A left-ordered group is a group with a left-invariant order.
/// This means that if `a <= b`, then `c * a <= c * b` for any c in the group.
typeclass G: LeftOrderedGroup extends Group, LinearOrder {
    /// Left multiplication preserves the order relation: if `a ≤ b`, then `c * a ≤ c * b`.
    left_invariance(a: G, b: G, c: G) {
        a <= b implies c * a <= c * b
    }
}

/// True if a is strictly less than b in the group order.
define lt<G: LeftOrderedGroup>(a: G, b: G) -> Bool {
    a <= b and a != b
}

theorem lt_trans<G: LeftOrderedGroup>(a: G, b: G, c: G) {
    lt(a, b) and lt(b, c) implies lt(a, c)
} by {
    a <= b and a != b
    b <= c and b != c
    a <= c and a != c
}

theorem one_lt_pow<G: LeftOrderedGroup>(a: G, n: Nat) {
    lt(G.1, a) and n != Nat.0 implies lt(G.1, a.pow(n))
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { 
        lt(G.1, a.pow(x.suc))
    }
    f(Nat.0)
    forall(x: Nat) {
        if f(x) {
            lt(G.1, a.pow(x.suc))
            a * G.1 <= a * a.pow(x.suc)
            lt(a * G.1, a * a.pow(x.suc))
            lt(a, a * a.pow(x.suc))
            lt(G.1, a.pow(x.suc.suc))
            f(x.suc)
        }
    }
    let n_pred: Nat satisfy {
        n_pred.suc = n
    }
    f(n_pred)
}

theorem pow_lt_one<G: LeftOrderedGroup>(a: G, n: Nat) {
    lt(a, G.1) and n != Nat.0 implies lt(a.pow(n), G.1)
} by {
    // Define a helper function for induction
    define f(x: Nat) -> Bool { 
        lt(a.pow(x.suc), G.1)
    }
    f(Nat.0)
    forall(x: Nat) {
        if f(x) {
            lt(a.pow(x.suc), G.1)
            a.pow(x.suc) != G.1
            a.pow(x.suc) <= G.1
            a * a.pow(x.suc) <= a * G.1
            lt(a * a.pow(x.suc), a * G.1)
            lt(a * a.pow(x.suc), a)
            f(x.suc)
        }
    }
    let n_pred: Nat satisfy {
        n_pred.suc = n
    }
    f(n_pred)
}

/// An ordered group has both left and right invariance of the order under multiplication.
typeclass G: OrderedGroup extends LeftOrderedGroup {
    /// Right multiplication preserves the order relation: if `a ≤ b`, then `a * c ≤ b * c`.
    right_invariance(a: G, b: G, c: G) {
        a <= b implies a * c <= b * c
    }
}

// Ordered groups must be torsion-free.
theorem ordered_imp_torsion_free<G: OrderedGroup>(g: G) {
    is_torsion_free<G>
} by {
    forall(g: G) {
        if has_finite_order(g) {
            let n: Nat satisfy {
                g.pow(n) = G.1
            }
            if g != G.1 {
                if lt(G.1, g) {
                    lt(G.1, g.pow(n))
                    false
                } else {
                    lt(g, G.1)
                    false
                }
            }
            g = G.1
        }
    }
}