from group import Group

// We define subgroups with the "bundled subgroups" technique, so a subgroup "carries along"
// its group.

define identity_constraint<G: Group>(contains: G -> Bool) -> Bool {
    contains(G.1)
}

define closure_constraint<G: Group>(contains: G -> Bool) -> Bool {
    forall(a: G, b: G) {
        contains(a) and contains(b) implies contains(a * b)
    }
}

define inverse_constraint<G: Group>(contains: G -> Bool) -> Bool {
    forall(a: G) {
        contains(a) implies contains(a.inverse)
    }
}

define subgroup_constraint<G: Group>(contains: G -> Bool) -> Bool {
    identity_constraint(contains) and closure_constraint(contains) and inverse_constraint(contains)
}

define is_identity<G: Group>(g: G) -> Bool {
    g = G.1
}

theorem identity_subgroup_constraint<G: Group> {
    subgroup_constraint(is_identity<G>)
} by {
    identity_constraint(is_identity<G>)
    closure_constraint(is_identity<G>)
    inverse_constraint(is_identity<G>)
}

structure Subgroup<G: Group> {
    contains: G -> Bool
} constraint {
    subgroup_constraint(contains)
}

let identity_subgroup<G: Group>: Subgroup<G> = Subgroup.new(is_identity<G>)

theorem identity_subgroup_only_has_identity<G: Group>(g: G) {
    identity_subgroup<G>.contains(g) implies g = G.1
}