from add_comm_monoid import AddCommMonoid
from monoid import Monoid

/// A semiring is like a ring but without additive inverses.
/// It has two operations where addition forms a commutative monoid, multiplication forms a monoid,
/// and multiplication distributes over addition.
typeclass S: Semiring extends AddCommMonoid, Monoid {
    /// Multiplication distributes over addition from the left: `a * (b + c) = (a * b) + (a * c)`.
    distrib_left(a: S, b: S, c: S) {
        a * (b + c) = (a * b) + (a * c)
    }

    /// Multiplication distributes over addition from the right: `(a + b) * c = (a * c) + (b * c)`.
    distrib_right(a: S, b: S, c: S) {
        (a + b) * c = (a * c) + (b * c)
    }
}