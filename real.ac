from int import Int
from rat import Rat

// Using the Dedekind cut definition of reals.

define is_cut(f: Rat -> Bool) -> Bool {
    exists(x: Rat) {
        f(x)
    } and exists(x: Rat) {
        not f(x)
    }
}

define is_lower(f: Rat -> Bool) -> Bool {
    forall(x: Rat, y: Rat) {
        f(y) and x < y -> f(x)
    }
}

define is_greatest(f: Rat -> Bool, x: Rat) -> Bool {
    f(x) and forall(y: Rat) {
        f(y) -> y <= x
    }
}

define has_greatest(f: Rat -> Bool) -> Bool {
    exists(x: Rat) {
        is_greatest(f, x)
    }
}

define is_dedekind_cut(f: Rat -> Bool) -> Bool {
    is_cut(f) and is_lower(f) and not has_greatest(f)
}

// "All numbers y such that x is greater then y" is the cut that embeds x.

theorem gt_is_cut(r: Rat) {
    is_cut(r.gt)
} by {
    r - (r - Rat.1) = Rat.1
    r > (r - Rat.1)
    not r > r
}

theorem gt_is_lower(r: Rat) {
    is_lower(r.gt)
} by {
    forall(x: Rat, y: Rat) {
        if r > y and x < y {
            y < r
            x < r
            r > x
        }
    }
}

theorem gt_has_no_greatest(r: Rat) {
    not has_greatest(r.gt)
} by {
    if has_greatest(r.gt) {
        let q: Rat satisfy {
            is_greatest(r.gt, q)
        }
        r > q
        let diff: Rat = r - q
        diff.is_positive
        q + diff = r

        // z will be a counterexample.
        // It's constructed to be larger than q.
        let z: Rat = q + diff / Rat.2
        (diff / Rat.2).is_positive
        q < z

        // z is still less than r, though. Since q is assu
        z + diff / Rat.2 = r
        z < r
        r > z

        // Since q is the greatest satisfying r.gt(_). But this contradicts.
        q >= z
        false
    }
}

theorem gt_is_dedekind_cut(r: Rat) {
    is_dedekind_cut(r.gt)
} by {
    gt_is_cut(r)
    gt_is_lower(r)
    gt_has_no_greatest(r)
}

// Real numbers are defined by a function of which rationals they are greater than.
structure Real {
    gt_rat: Rat -> Bool
} constraint {
    is_dedekind_cut(gt_rat)
}

class Real {
    let from_rat: Rat -> Real = function(r: Rat) {
        Real.new(r.gt)
    }

    let 0: Real = Real.from_rat(Rat.0)

    define is_positive(self) -> Bool {
        self.gt_rat(Rat.0)
    }

    define is_negative(self) -> Bool {
        self != Real.0 and not self.is_positive
    }

    // For reals, <= is the comparison operator by which the others are defined. 
    define lte(self, other: Real) -> Bool {
        forall(r: Rat) {
            self.gt_rat(r) -> other.gt_rat(r)
        }
    }

    define lt(self, other: Real) -> Bool {
        self != other and self.lte(other)
    }

    define gte(self, other: Real) -> Bool {
        other.lte(self)
    }

    define gt(self, other: Real) -> Bool {
        other.lt(self)
    }
}

theorem gt_imp_from_rat_gt(r1: Rat, r2: Rat) {
    r1 > r2 -> Real.from_rat(r1).gt_rat(r2)
}

theorem from_rat_gt_imp_gt(r1: Rat, r2: Rat) {
    Real.from_rat(r1).gt_rat(r2) -> r1 > r2
}

theorem not_gt_rat_self(r: Rat) {
    not Real.from_rat(r).gt_rat(r)
}

theorem zero_not_positive {
    not Real.0.is_positive
} by {
    not Rat.0 > Rat.0
    not Real.from_rat(Rat.0).gt_rat(Rat.0)
    not Real.from_rat(Rat.0).is_positive
}

theorem lte_self(r: Real) {
    r <= r
}

theorem gte_self(r: Real) {
    r >= r
}

theorem lte_trans(a: Real, b: Real, c: Real) {
    a <= b and b <= c -> a <= c
}

theorem gt_rat_sorts(z: Real, r1: Rat, r2: Rat) {
    z.gt_rat(r1) and not z.gt_rat(r2) -> r1 < r2
} by {
    if r2 < r1 {
        is_lower(z.gt_rat)
        z.gt_rat(r2)
        false
    }
    if r2 = r1 {
        z.gt_rat(r2)
        false
    }
}

theorem lte_or_gte(a: Real, b: Real) {
    a <= b or b <= a
} by {
    if not a <= b {
        let r1: Rat satisfy {
            a.gt_rat(r1) and not b.gt_rat(r1)
        }
        forall(r2: Rat) {
            if b.gt_rat(r2) {
                r2 < r1
                a.gt_rat(r2)
            }
        }
        b <= a
    }
}

theorem lte_both_ways_imp_eq(a: Real, b: Real) {
    a <= b and b <= a -> a = b
} by {
    forall(r: Rat) {
        if a.gt_rat(r) {
            b.gt_rat(r)
            a.gt_rat(r) = b.gt_rat(r)
        } else {
            not a.gt_rat(r)
            not b.gt_rat(r)
            a.gt_rat(r) = b.gt_rat(r)
        }
    }
    a.gt_rat = b.gt_rat
    a = b    
}

theorem gt_rat_imp_gt_from_rat(a: Real, r: Rat) {
    a.gt_rat(r) -> a > Real.from_rat(r)
} by {
    if not Real.from_rat(r) <= a {
        let r2: Rat satisfy {
            Real.from_rat(r).gt_rat(r2) and not a.gt_rat(r2)
        }
        r < r2
        a.gt_rat(r2)
        false
    }
    if Real.from_rat(r) = a {
        false
    }
}

theorem gt_from_rat_imp_gt_rat(a: Real, r: Rat) {
    a > Real.from_rat(r) -> a.gt_rat(r)
} by {
    not a <= Real.from_rat(r)
    let r2: Rat satisfy {
        a.gt_rat(r2) and not Real.from_rat(r).gt_rat(r2)
    }
}

theorem pos_gt_zero(a: Real) {
    a.is_positive -> a > Real.0
} by {
    a.is_positive
    a.gt_rat(Rat.0)
    a > Real.from_rat(Rat.0)
}

theorem gt_zero_imp_pos(a: Real) {
    a > Real.0 -> a.is_positive
} by {
    a > Real.0
    a > Real.from_rat(Rat.0)
    a.gt_rat(Rat.0)
    a.is_positive
}

theorem neg_lt_zero(a: Real) {
    a.is_negative -> a < Real.0
} by {
    if not a < Real.0 {
        Real.0 <= a
        if a = Real.0 {
            false
        } else {
            a > Real.0
            a.is_positive
            false
        }
    }
}

theorem lt_zero_imp_neg(a: Real) {
    a < Real.0 -> a.is_negative
} by {
    if not a.is_negative {
        a.is_positive
        a > Real.0
        a >= Real.0
        a = Real.0
        false
    }
}

define is_upper_bound(s: Real -> Bool, ub: Real) -> Bool {
    forall(r: Real) {
        s(r) -> r <= ub
    }
}

define bounded_above(s: Real -> Bool) -> Bool {
    exists(ub: Real) {
        is_upper_bound(s, ub)
    }
}

define is_lower_bound(s: Real -> Bool, lb: Real) -> Bool {
    forall(r: Real) {
        s(r) -> lb <= r
    }
}

define is_least_upper_bound(s: Real -> Bool, lub: Real) -> Bool {
    is_lower_bound(is_upper_bound(s), lub)
}

define add_gt(z1: Real, z2: Real, r: Rat) -> Bool {
    exists(r1: Rat, r2: Rat) {
        z1.gt_rat(r1) and z2.gt_rat(r2) and r = r1 + r2
    }
}

theorem add_gt_symm(z1: Real, z2: Real, r: Rat) {
    add_gt(z1, z2, r) -> add_gt(z2, z1, r)
} by {
    let (r1: Rat, r2: Rat) satisfy {
        z1.gt_rat(r1) and z2.gt_rat(r2) and r = r1 + r2
    }
    add_gt(z2, z1, r2 + r1)
}

theorem exists_lesser_rat(z: Real) {
    exists(r: Rat) {
        z.gt_rat(r)
    }
} by {
    is_cut(z.gt_rat)
}

theorem exists_gte_rat(z: Real) {
    exists(r: Rat) {
        not z.gt_rat(r)
    }
} by {
    is_cut(z.gt_rat)
}

theorem add_gt_is_cut(z1: Real, z2: Real) {
    is_cut(add_gt(z1, z2))
} by {
    // Prove there's something lower
    let lower1: Rat satisfy {
        z1.gt_rat(lower1)
    }
    let lower2: Rat satisfy {
        z2.gt_rat(lower2)
    }
    add_gt(z1, z2, lower1 + lower2)

    // Prove there's something higher
    let upper1: Rat satisfy {
        not z1.gt_rat(upper1)
    }
    let upper2: Rat satisfy {
        not z2.gt_rat(upper2)
    }
    if add_gt(z1, z2, upper1 + upper2) {
        let (f1: Rat, f2: Rat) satisfy {
            z1.gt_rat(f1) and z2.gt_rat(f2) and upper1 + upper2 = f1 + f2
        } 
        f1 < upper1
        f2 < upper2
        f1 + f2 < upper1 + f2
        upper1 + f2 < upper1 + upper2
        f1 + f2 < upper1 + upper2
        false
    }
}

theorem add_gt_is_lower(z1: Real, z2: Real) {
    is_lower(add_gt(z1, z2))
} by {
    forall(r1: Rat, r2: Rat) {
        if add_gt(z1, z2, r2) and r1 < r2 {
            let (f1: Rat, f2: Rat) satisfy {
                z1.gt_rat(f1) and z2.gt_rat(f2) and r2 = f1 + f2
            }
            (r2 - r1).is_positive
            f1 + f2 + -(r2 - r1) = r2 + -(r2 - r1)
            f1 + f2 + -(r2 - r1) = r1
            f1 + (f2 + -(r2 - r1)) = r1
            f2 + -(r2 - r1) < f2
            z2.gt_rat(f2 + -(r2 - r1))
            add_gt(z1, z2, r1)
        }
    }
}

theorem add_gt_has_no_greatest(z1: Real, z2: Real) {
    not has_greatest(add_gt(z1, z2))
} by {
    if has_greatest(add_gt(z1, z2)) {
        let q: Rat satisfy {
            is_greatest(add_gt(z1, z2), q)
        }
        add_gt(z1, z2, q)
        let (f1: Rat, f2: Rat) satisfy {
            z1.gt_rat(f1) and z2.gt_rat(f2) and q = f1 + f2
        }
        not is_greatest(z1.gt_rat, f1)
        let g1: Rat satisfy {
            z1.gt_rat(g1) and not g1 <= f1
        }
        f1 < g1
        f1 + f2 < g1 + f2
        add_gt(z1, z2, g1 + f2)
        q < g1 + f2
        not g1 + f2 <= q
        not is_greatest(add_gt(z1, z2), q)
        false
    }
}

theorem add_gt_is_dedekind_cut(z1: Real, z2: Real) {
    is_dedekind_cut(add_gt(z1, z2))
}

class Real {
    define add(self, other: Real) -> Real {
        Real.new(add_gt(self, other))
    }
}

theorem add_gt_rat(z1: Real, z2: Real, r1: Rat, r2: Rat) {
    z1.gt_rat(r1) and z2.gt_rat(r2) -> (z1 + z2).gt_rat(r1 + r2)
}

theorem add_comm(a: Real, b: Real) {
    a + b = b + a
} by {
    forall(r: Rat) {
        if add_gt(a, b, r) {
            add_gt(b, a, r)
            add_gt(a, b, r) = add_gt(b, a, r)
        } else {
            not add_gt(b, a, r)
            add_gt(a, b, r) = add_gt(b, a, r)
        }
        add_gt(a, b, r) = add_gt(b, a, r)
    }
    add_gt(a, b) = add_gt(b, a)
}

theorem gt_rat_adding_three(z1: Real, z2: Real, z3: Real, q: Rat) {
    (z1 + z2 + z3).gt_rat(q) -> exists(r1: Rat, r2: Rat, r3: Rat) {
        z1.gt_rat(r1) and z2.gt_rat(r2) and z3.gt_rat(r3) and q = r1 + r2 + r3
    }
} by {
    add_gt(z1 + z2, z3, q)
    let (r12: Rat, r3: Rat) satisfy {
        (z1 + z2).gt_rat(r12) and z3.gt_rat(r3) and q = r12 + r3
    }
    add_gt(z1, z2, r12)
    let (r1: Rat, r2: Rat) satisfy {
        z1.gt_rat(r1) and z2.gt_rat(r2) and r12 = r1 + r2
    }
}

theorem gt_rat_adding_three_converse(z1: Real, z2: Real, z3: Real, q: Rat) {
    exists(r1: Rat, r2: Rat, r3: Rat) {
        z1.gt_rat(r1) and z2.gt_rat(r2) and z3.gt_rat(r3) and q = r1 + r2 + r3
    } -> (z1 + z2 + z3).gt_rat(q)
} by {
    let (r1: Rat, r2: Rat, r3: Rat) satisfy {
        z1.gt_rat(r1) and z2.gt_rat(r2) and z3.gt_rat(r3) and q = r1 + r2 + r3
    }
    add_gt(z1, z2 + z3, r1 + r2 + r3)
}

theorem add_assoc(a: Real, b: Real, c: Real) {
    a + b + c = a + (b + c)
} by {
    forall(r: Rat) {
        if (a + b + c).gt_rat(r) {
            let (ra: Rat, rb: Rat, rc: Rat) satisfy {
                a.gt_rat(ra) and b.gt_rat(rb) and c.gt_rat(rc) and r = ra + rb + rc
            }
            (b + c).gt_rat(rb + rc)
            (a + (b + c)).gt_rat(r)
            (a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)
        } else {
            if (a + (b + c)).gt_rat(r) {
                add_gt(a, b + c, r)
                let (ra: Rat, rbc: Rat) satisfy {
                    a.gt_rat(ra) and (b + c).gt_rat(rbc) and r = ra + rbc
                }
                add_gt(b, c, rbc)
                let (rb: Rat, rc: Rat) satisfy {
                    b.gt_rat(rb) and c.gt_rat(rc) and rbc = rb + rc
                }
                r = ra + rb + rc
                false
            }
            (a + b + c).gt_rat(r) = (a + (b + c)).gt_rat(r)
        }
    }
    (a + b + c).gt_rat = (a + (b + c)).gt_rat
}