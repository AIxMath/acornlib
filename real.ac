from int import Int
from rat import Rat

// Using the Dedekind cut definition of reals.

define is_cut(f: Rat -> Bool) -> Bool {
    exists(x: Rat) {
        f(x)
    } and exists(x: Rat) {
        not f(x)
    }
}

define is_lower(f: Rat -> Bool) -> Bool {
    forall(x: Rat, y: Rat) {
        f(y) and x < y -> f(x)
    }
}

define is_greatest(f: Rat -> Bool, x: Rat) -> Bool {
    f(x) and forall(y: Rat) {
        f(y) -> y <= x
    }
}

define has_greatest(f: Rat -> Bool) -> Bool {
    exists(x: Rat) {
        is_greatest(f, x)
    }
}

define is_dedekind_cut(f: Rat -> Bool) -> Bool {
    is_cut(f) and is_lower(f) and not has_greatest(f)
}

// "All numbers y such that x is greater then y" is the cut that embeds x.

theorem gt_is_cut(r: Rat) {
    is_cut(r.gt)
} by {
    r - (r - Rat.1) = Rat.1
    r > (r - Rat.1)
    not r > r
}

theorem gt_is_lower(r: Rat) {
    is_lower(r.gt)
} by {
    forall(x: Rat, y: Rat) {
        if r > y and x < y {
            y < r
            x < r
            r > x
        }
    }
}

theorem gt_has_no_greatest(r: Rat) {
    not has_greatest(r.gt)
} by {
    if has_greatest(r.gt) {
        let q: Rat satisfy {
            is_greatest(r.gt, q)
        }
        r > q
        let diff: Rat = r - q
        diff.is_positive
        q + diff = r

        // z will be a counterexample.
        // It's constructed to be larger than q.
        let z: Rat = q + diff / Rat.2
        (diff / Rat.2).is_positive
        q < z

        // z is still less than r, though. Since q is assu
        z + diff / Rat.2 = r
        z < r
        r > z

        // Since q is the greatest satisfying r.gt(_). But this contradicts.
        q >= z
        false
    }
}

theorem gt_is_dedekind_cut(r: Rat) {
    is_dedekind_cut(r.gt)
} by {
    gt_is_cut(r)
    gt_is_lower(r)
    gt_has_no_greatest(r)
}

// Real numbers are defined by a function of which rationals they are greater than.
structure Real {
    gt_rat: Rat -> Bool
} constraint {
    is_dedekind_cut(gt_rat)
}

class Real {
    let from_rat: Rat -> Real = function(r: Rat) {
        Real.new(r.gt)
    }

    let 0: Real = Real.from_rat(Rat.0)

    define is_positive(self) -> Bool {
        self.gt_rat(Rat.0)
    }

    define is_negative(self) -> Bool {
        self != Real.0 and not self.is_positive
    }

    define lte(self, other: Real) -> Bool {
        forall(r: Rat) {
            self.gt_rat(r) -> other.gt_rat(r)
        }
    }

    define lt(self, other: Real) -> Bool {
        self != other and self.lte(other)
    }

    define gte(self, other: Real) -> Bool {
        other.lte(self)
    }

    define gt(self, other: Real) -> Bool {
        other.lt(self)
    }
}

theorem gt_imp_from_rat_gt(r1: Rat, r2: Rat) {
    r1 > r2 -> Real.from_rat(r1).gt_rat(r2)
}

theorem from_rat_gt_imp_gt(r1: Rat, r2: Rat) {
    Real.from_rat(r1).gt_rat(r2) -> r1 > r2
}

theorem zero_not_positive {
    not Real.0.is_positive
} by {
    not Rat.0 > Rat.0
    not Real.from_rat(Rat.0).gt_rat(Rat.0)
    not Real.from_rat(Rat.0).is_positive
}

theorem lte_self(r: Real) {
    r <= r
}

theorem gte_self(r: Real) {
    r >= r
}

theorem lte_trans(a: Real, b: Real, c: Real) {
    a <= b and b <= c -> a <= c
}

theorem gt_rat_sorts(z: Real, r1: Rat, r2: Rat) {
    z.gt_rat(r1) and not z.gt_rat(r2) -> r1 < r2
} by {
    if r2 < r1 {
        is_lower(z.gt_rat)
        z.gt_rat(r2)
        false
    }
    if r2 = r1 {
        z.gt_rat(r2)
        false
    }
}

theorem lte_or_gte(a: Real, b: Real) {
    a <= b or b <= a
} by {
    if not a <= b {
        let r1: Rat satisfy {
            a.gt_rat(r1) and not b.gt_rat(r1)
        }
        forall(r2: Rat) {
            if b.gt_rat(r2) {
                r2 < r1
                a.gt_rat(r2)
            }
        }
        b <= a
    }
}

// theorem lte_gte_imp_eq(a: Real, b: Real) {
//     a <= b and b <= a -> a = b
// }